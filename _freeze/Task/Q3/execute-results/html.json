{
  "hash": "91e7017da396a2eab681a69df93827e6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Vast Challenge 2024: Question 4\"\nauthor: \"Ke Ke\"\ndate: \"18 May 2024\"\ndate-modified: \"last-modified\"\nformat:\n  html:\n    code-fold: true\n    code-tools: true\nexecute:\n  warning: false\n  freeze: true\n---\n\n\n## Getting Started\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidytext, readtext, quanteda, tidyverse, jsonlite, igraph, tidygraph, ggraph, visNetwork, clock, graphlayouts,ggplot2)\n```\n:::\n\n\n## **Importing JSON File**\n\nDirect import of the mc3.json file shows an error message indicating that there's an invalid character in the JSON text, specifically \"NaN\". As \"NaN\" is not recognised as a valid value, preprocessing of the JSON file to replace \"NaN\" is required.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read the JSON file as text\njson_text <- readLines(\"data/mc3.json\" ,warn = FALSE)\n\n# Replace \"NaN\" with \"null\"\njson_text_fixed <- gsub(\"NaN\", \"null\", json_text)\n\n# Write the fixed JSON text back to a file\nwriteLines(json_text_fixed, \"data/mc3_fixed.json\")\n```\n:::\n\n\nImporting preprocessed mc3_fixed.json file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_data <- fromJSON(\"data/mc3_fixed.json\")\n```\n:::\n\n\n## Data Cleaning\n\n### Missing Values\n\nIdentify the percentage of missing values within the dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to calculate missing value percentages\ncalculate_missing_percentage <- function(df) {\n  total_values <- nrow(df) * ncol(df)\n  missing_values <- sum(is.na(df))\n  missing_percentage <- (missing_values / total_values) * 100\n  return(missing_percentage)\n}\n```\n:::\n\n\nMissing percentage of nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_missing_percentage <- calculate_missing_percentage(mc3_data[[\"nodes\"]])\nnodes_missing_percentage\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35.11952\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_missing_by_column <- sapply(mc3_data[[\"nodes\"]], function(x) sum(is.na(x)) / length(x) * 100)\n```\n:::\n\n\nMissing percentage of edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinks_missing_percentage <- calculate_missing_percentage(mc3_data[[\"links\"]])\nlinks_missing_percentage\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.059973\n```\n\n\n:::\n\n```{.r .cell-code}\nlinks_missing_by_column <- sapply(mc3_data[[\"links\"]], function(x) sum(is.na(x)) / length(x) * 100)\nlinks_missing_by_column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       start_date              type   _last_edited_by _last_edited_date \n        0.1187069         0.0000000         0.0000000         0.0000000 \n      _date_added       _raw_source        _algorithm            source \n        0.0000000         0.0000000         0.0000000         0.0000000 \n           target               key          end_date \n        0.0000000         0.0000000        99.5410000 \n```\n\n\n:::\n:::\n\n\nPrint missing percentages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \nprint(nodes_missing_percentage)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35.11952\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(nodes_missing_by_column)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             type           country   ProductServices    PointOfContact \n          0.00000           0.00000          85.34204          85.38334 \n        HeadOfOrg     founding_date           revenue  TradeDescription \n         85.35691          85.34204          85.36847          85.34204 \n  _last_edited_by _last_edited_date       _date_added       _raw_source \n          0.00000           0.00000           0.00000           0.00000 \n       _algorithm                id               dob \n          0.00000           0.00000          14.65796 \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(links_missing_percentage)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.059973\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(links_missing_by_column)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       start_date              type   _last_edited_by _last_edited_date \n        0.1187069         0.0000000         0.0000000         0.0000000 \n      _date_added       _raw_source        _algorithm            source \n        0.0000000         0.0000000         0.0000000         0.0000000 \n           target               key          end_date \n        0.0000000         0.0000000        99.5410000 \n```\n\n\n:::\n:::\n\n\n::: panel-tabset\n## Observations:\n\n-   **Nodes Data:**\n\n    -   `ProductServices`, `PointOfContact`, `HeadOfOrg`, `founding_date`, `revenue`, and `TradeDescription` columns have a high percentage of missing values (around 85%).\n\n    -   The `dob` column has about 14.7% missing values.\n\n    -   Other columns (`type`, `country`, `_last_edited_by`, `_last_edited_date`, `_date_added`, `_raw_source`, `_algorithm`, and `id`) have no missing values.\n\n-   **Links Data:**\n\n    -   `end_date` has a very high percentage of missing values (around 99.5%).\n\n## Actions:\n\n-   Filled missing values in `HeadOfOrg` with \"Unknown\".\n\n-   Filled missing values in `revenue` with 0.\n\n-   Filled missing values in `start_date` and `end_date` with \"Unknown\".\n:::\n\nHandle missing values\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select crucial columns and fill missing values where appropriate\ncleaned_nodes <- mc3_data[[\"nodes\"]] %>%\n  select(id, type, country, HeadOfOrg, revenue,ProductServices,PointOfContact,founding_date,TradeDescription,dob,\n         `_last_edited_by`, `_last_edited_date`, `_date_added`, `_raw_source`, `_algorithm`) %>%\n  mutate(HeadOfOrg = ifelse(is.na(HeadOfOrg), \"Unknown\", HeadOfOrg),\n         revenue = ifelse(is.na(revenue), 0, revenue))\n\n# Handle missing values in links\n# Select crucial columns and fill missing values where appropriate\ncleaned_links <- mc3_data[[\"links\"]] %>%\n  select(key,source, target, type, start_date, end_date, `_last_edited_by`, `_last_edited_date`, `_date_added`, `_raw_source`, `_algorithm`) %>%\n  mutate(start_date = ifelse(is.na(start_date), \"Unknown\", start_date),\n         end_date = ifelse(is.na(end_date), \"Unknown\", end_date))\n\n# Ensure proper data types\ncleaned_nodes <- cleaned_nodes %>%\n  mutate(\n    id = as.character(id),\n    type = as.character(type),\n    country = as.character(country),\n    HeadOfOrg = as.character(HeadOfOrg),\n    revenue = as.numeric(revenue),\n    `_last_edited_by` = as.character(`_last_edited_by`),\n    `_last_edited_date` = as.character(`_last_edited_date`),\n    `_date_added` = as.character(`_date_added`),\n    `_raw_source` = as.character(`_raw_source`),\n    `_algorithm` = as.character(`_algorithm`)\n  )\n\ncleaned_links <- cleaned_links %>%\n mutate(\n    source = as.character(source),\n    target = as.character(target),\n    type = as.character(type),\n    start_date = as.character(start_date),\n    end_date = as.character(end_date),\n    `_last_edited_by` = as.character(`_last_edited_by`),\n    `_last_edited_date` = as.character(`_last_edited_date`),\n    `_date_added` = as.character(`_date_added`),\n    `_raw_source` = as.character(`_raw_source`),\n    `_algorithm` = as.character(`_algorithm`)\n  )\n```\n:::\n\n\n### Check for data types\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure correct data types for nodes\ncleaned_nodes <- cleaned_nodes %>%\n  mutate(\n    id = as.character(id),\n    type = as.character(type),\n    country = as.character(country),\n    HeadOfOrg = as.character(HeadOfOrg),\n    revenue = as.numeric(revenue),\n      dob = as.POSIXct(dob, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_last_edited_by` = as.character(`_last_edited_by`),\n    `_last_edited_date` = as.POSIXct(`_last_edited_date`, format=\"%Y-%m-%dT%H:%M:%S\"),\n    founding_date=as.POSIXct(founding_date, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_date_added` = as.POSIXct(`_date_added`, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_raw_source` = as.character(`_raw_source`),\n    `_algorithm` = as.character(`_algorithm`)\n    \n  )\n\n# Ensure correct data types for links\ncleaned_links <- cleaned_links %>%\n mutate(\n    source = as.character(source),\n    target = as.character(target),\n    type = as.character(type),\n    start_date = as.POSIXct(start_date, format=\"%Y-%m-%dT%H:%M:%S\"),\n    end_date = as.POSIXct(end_date, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_last_edited_by` = as.character(`_last_edited_by`),\n    `_last_edited_date` = as.POSIXct(`_last_edited_date`, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_date_added` = as.POSIXct(`_date_added`, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_raw_source` = as.character(`_raw_source`),\n    `_algorithm` = as.character(`_algorithm`)\n  )\n\n# Print cleaned data for inspection\nglimpse(cleaned_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 60,520\nColumns: 15\n$ id                  <chr> \"Abbott, Mcbride and Edwards\", \"Abbott-Gomez\", \"Ab…\n$ type                <chr> \"Entity.Organization.Company\", \"Entity.Organizatio…\n$ country             <chr> \"Uziland\", \"Mawalara\", \"Uzifrica\", \"Islavaragon\", …\n$ HeadOfOrg           <chr> \"Émilie-Susan Benoit\", \"Honoré Lemoine\", \"Jules La…\n$ revenue             <dbl> 5994.73, 71766.67, 0.00, 0.00, 4746.67, 46566.67, …\n$ ProductServices     <chr> \"Unknown\", \"Furniture and home accessories\", \"Food…\n$ PointOfContact      <chr> \"Rebecca Lewis\", \"Michael Lopez\", \"Steven Robertso…\n$ founding_date       <dttm> 1954-04-24, 2009-06-12, 2029-12-15, 1972-02-16, 1…\n$ TradeDescription    <chr> \"Unknown\", \"Abbott-Gomez is a leading manufacturer…\n$ dob                 <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `_last_edited_by`   <chr> \"Pelagia Alethea Mordoch\", \"Pelagia Alethea Mordoc…\n$ `_last_edited_date` <dttm> 2035-01-01, 2035-01-01, 2035-01-01, 2035-01-01, 2…\n$ `_date_added`       <dttm> 2035-01-01, 2035-01-01, 2035-01-01, 2035-01-01, 2…\n$ `_raw_source`       <chr> \"Existing Corporate Structure Data\", \"Existing Cor…\n$ `_algorithm`        <chr> \"Automatic Import\", \"Automatic Import\", \"Automatic…\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(cleaned_links)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 75,817\nColumns: 11\n$ key                 <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ source              <chr> \"Avery Inc\", \"Berger-Hayes\", \"Bowers Group\", \"Bowm…\n$ target              <chr> \"Allen, Nichols and Thompson\", \"Jensen, Morris and…\n$ type                <chr> \"Event.Owns.Shareholdership\", \"Event.Owns.Sharehol…\n$ start_date          <dttm> 2016-10-29, 2035-06-03, 2028-11-20, 2024-09-04, 2…\n$ end_date            <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `_last_edited_by`   <chr> \"Pelagia Alethea Mordoch\", \"Niklaus Oberon\", \"Pela…\n$ `_last_edited_date` <dttm> 2035-01-01, 2035-07-15, 2035-01-01, 2035-01-01, 2…\n$ `_date_added`       <dttm> 2035-01-01, 2035-07-15, 2035-01-01, 2035-01-01, 2…\n$ `_raw_source`       <chr> \"Existing Corporate Structure Data\", \"Oceanus Corp…\n$ `_algorithm`        <chr> \"Automatic Import\", \"Manual Entry\", \"Automatic Imp…\n```\n\n\n:::\n:::\n\n\n### **Changing field name**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncleaned_nodes <- cleaned_nodes %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n\ncleaned_links<- cleaned_links %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n```\n:::\n\n\n### Split *'type'* column into separate columns\n\nWe are going to tidy the type column by creating two columns \"entity2,entity3\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list1 <- strsplit(cleaned_nodes$type, \"\\\\.\")\nmax_elements1 <- max(lengths(word_list1))\nword_list_padded1 <- lapply(word_list1, \nfunction(x) c(x, rep(NA, max_elements1 - length(x))))\nword_df1 <- do.call(rbind, word_list_padded1)\ncolnames(word_df1) <- paste0(\"entity\", 1:max_elements1)\nword_df1 <- as_tibble(word_df1) %>%\n  select(entity2, entity3)\nclass(word_df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\nThe steps below will be used to split text in type column into two columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(cleaned_links$type, \"\\\\.\")\nmax_elements <- max(lengths(word_list))\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"event\", 1:max_elements)\nword_df <- as_tibble(word_df) %>%\n  select(event2, event3)\nclass(word_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\nSince the output above is a matrix, the code chunk above is used to convert word_df into a tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncleaned_nodes <- cleaned_nodes %>%\n  cbind(word_df1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncleaned_links <- cleaned_links %>%\n  cbind(word_df)\n```\n:::\n\n\nThe code chunk above appends the extracted columns back to edges tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(cleaned_nodes, \"data/rds/cleaned_nodes.rds\")\nwrite_rds(cleaned_links, \"data/rds/cleaned_links.rds\")\n```\n:::\n\n\nabove code write into R **rds** file format.\n\n## Question 3\n\nBy analyzing the ownership structure, we tracked changes in most influential individuals (VIP) networks over time, identifying key individuals with increasing influence.\n\n### Part 1: Data Wrangling\n\nSplit the nodes into people and companies, and filter ownership-related edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Split the nodes into people and companies\nnodes_people <- cleaned_nodes %>% filter(entity2 == \"Person\")\nnodes_company <- cleaned_nodes %>% filter(entity2 == \"Organization\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the links to include only ownership-related edges\nlinks_owns <- cleaned_links %>% filter(event2 == \"Owns\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_people <- nodes_people %>%\n  rowwise() %>%\n  mutate('no_owns' = sum(links_owns$source == id))\n\nnodes_people$no_owns <- as.numeric(nodes_people$no_owns)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the unique counts of 'no_owns' and their corresponding counts and percentages\nowns_summary <- nodes_people %>%\n  group_by(no_owns) %>%\n  summarise(count = n()) %>%\n  mutate(percentage = (count / sum(count)) * 100)\n\n# Display the summary\nprint(owns_summary)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 19 × 3\n   no_owns count percentage\n     <dbl> <int>      <dbl>\n 1       0   147    0.285  \n 2       1 46370   89.8    \n 3       2  4032    7.81   \n 4       3   665    1.29   \n 5       4   245    0.474  \n 6       5    80    0.155  \n 7       6    34    0.0658 \n 8       7    21    0.0407 \n 9       8    11    0.0213 \n10       9     7    0.0136 \n11      10     2    0.00387\n12      11     4    0.00774\n13      12     3    0.00581\n14      13     2    0.00387\n15      15     1    0.00194\n16      18     2    0.00387\n17      29     1    0.00194\n18      91    18    0.0349 \n19      92     4    0.00774\n```\n\n\n:::\n:::\n\n\nTo define and identify influential people based on an ownership threshold. It filters the nodes to keep only those with a significant number of ownerships\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the threshold for 'influential'\nvip_threshold <- 91\n\n# Filter to keep only influential people and select relevant columns\nvip <- nodes_people %>%\n  filter(no_owns >= vip_threshold) %>%\n  select(id, country, dob, last_edited_date, date_added, no_owns)\n\n# Display the updated vip data frame\nglimpse(vip)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 22\nColumns: 6\nRowwise: \n$ id               <chr> \"Kelsey Ortega\", \"Joseph Gentry\", \"Cynthia Anderson\",…\n$ country          <chr> \"n.a.\", \"n.a.\", \"n.a.\", \"n.a.\", \"n.a.\", \"n.a.\", \"n.a.…\n$ dob              <dttm> 1974-11-26, 1980-11-08, 1991-07-23, 2013-10-03, 1981…\n$ last_edited_date <dttm> 2035-01-01, 2035-01-01, 2035-01-01, 2035-01-01, 2035…\n$ date_added       <dttm> 2035-01-01, 2035-01-01, 2035-01-01, 2035-01-01, 2035…\n$ no_owns          <dbl> 91, 91, 91, 92, 91, 92, 91, 91, 91, 91, 91, 91, 91, 9…\n```\n\n\n:::\n:::\n\n\nfilter the ownership connections to include only those involving these influential individuals\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter links_owns to keep only those connections where the source is in the vip list\nvip_connections <- links_owns %>%\n  filter(source %in% vip$id)%>%\n  select(source, target,start_date,end_date,last_edited_date, date_added)\n\n# Display the updated vip_connections data frame\nglimpse(vip_connections)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,006\nColumns: 6\n$ source           <chr> \"Kelsey Ortega\", \"Kelsey Ortega\", \"Kelsey Ortega\", \"K…\n$ target           <chr> \"Mitchell-Glover\", \"Anderson, Smith and Weber\", \"Orr …\n$ start_date       <dttm> 2017-08-11, 2028-12-13, 2016-09-18, 2034-12-16, 2032…\n$ end_date         <dttm> NA, NA, NA, NA, 2035-07-13, NA, NA, NA, NA, NA, NA, …\n$ last_edited_date <dttm> 2035-01-01, 2035-01-01, 2035-01-01, 2035-01-01, 2035…\n$ date_added       <dttm> 2035-01-01, 2035-01-01, 2035-01-01, 2035-01-01, 2035…\n```\n\n\n:::\n:::\n\n\n### Part 1: Network Graph\n\nFinally, plot the network, highlighting the structure and connections of influential individuals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create graph from VIP connections\ng_vip <- graph_from_data_frame(d = vip_connections, directed = TRUE)\n\n# Identify VIPs and Companies\nV(g_vip)$type <- ifelse(V(g_vip)$name %in% nodes_people$id, \"VIP\", \"Company\")\n\n# Define colors and sizes\nV(g_vip)$color <- ifelse(V(g_vip)$type == \"VIP\", \"blue\", \"orange\")\nV(g_vip)$size <- ifelse(V(g_vip)$type == \"VIP\", 8, 5)\n\n# Plot the network\nplot(g_vip, vertex.label = NA, vertex.size = V(g_vip)$size, edge.arrow.size = 0.5, \n     vertex.color = V(g_vip)$color, main = \"VIP Connections Network\")\n```\n\n::: {.cell-output-display}\n![](Q3_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\nThe plot represents the VIP Connections Network, with blue nodes indicating influential VIPs and orange nodes representing companies they own. Directed edges illustrate ownership, pointing from VIPs to companies. This visualization highlights the dense centrality of VIPs, showcasing their extensive control across multiple companies. By examining these connections, we can infer the structure and extent of VIP influence within the network and help FishEye identify influential individuals within the business network, highlighting ownership structures and central figures. By tracking ownership changes over time, FishEye can pinpoint who controls companies involved in illegal fishing activities.\n\nWhile this plot provides a static snapshot, in the following we shall create similar plots for different time periods can reveal changes in ownership and influence over time.\n\n### Part 2: Temporal Analysis\n\nAggregate Ownership Changes by Year\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchange_over_time1 <- links_owns %>%\n  group_by(start_date) %>%\n  summarize(count = n()) %>%\n  drop_na()\n\nlinks_owns<- links_owns %>%\n  mutate(start_year = format(start_date, \"%Y\"))\n\n# Aggregate ownership changes by year\nchange_over_time <- links_owns %>%\n  group_by(start_year) %>%\n  summarize(count = n()) %>%\n  drop_na()\n```\n:::\n\n\nCreate plots to visualize the changes in ownership over time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot changes over time\nggplot(change_over_time, aes(x = as.numeric(start_year), y = count)) +\n  geom_line() +\n  geom_point() +\n  labs(title = \"Changes in Ownership Over Time\",\n       x = \"Year\",\n       y = \"Number of Ownership Changes\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Q3_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n### Part 2: Network Graph by Year\n\nGiven the significant increase in data from 2004 onwards, focusing on every 10 years from 2005 to 2035 would provide a more detailed analysis of changes in ownership and influence.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify the year \nfilter_year <- 2005\n\n# Filter vip_connections by start_year\nvip_connections_filtered <- vip_connections %>%\n  filter(format(start_date, \"%Y\") == filter_year)\n\n# Create the graph object from the filtered vip_connections\ng_vip_filtered <- graph_from_data_frame(d = vip_connections_filtered, directed = TRUE)\n\n# Identify VIPs (nodes_people) and Companies\nV(g_vip_filtered)$type <- ifelse(V(g_vip_filtered)$name %in% nodes_people$id, \"VIP\", \"Company\")\n\n# Define colors and sizes\nV(g_vip_filtered)$color <- ifelse(V(g_vip_filtered)$type == \"VIP\", \"blue\", \"orange\")\nV(g_vip_filtered)$size <- ifelse(V(g_vip_filtered)$type == \"VIP\", 8, 5)\n\n# Plot the network\np2005<-plot(g_vip_filtered, vertex.label = NA, vertex.size = V(g_vip_filtered)$size, edge.arrow.size = 0.5, \n     vertex.color = V(g_vip_filtered)$color, main = paste(\"VIP Connections Network for\", filter_year))\n```\n\n::: {.cell-output-display}\n![](Q3_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nIn 2005, the network shows a relatively sparse structure with a moderate number of connections. VIPs (blue nodes) are moderately interconnected, indicating a balanced distribution of influence among several key players.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify the year\nfilter_year <- 2015\n\n# Filter vip_connections by start_year\nvip_connections_filtered_2015 <- vip_connections %>%\n  filter(format(start_date, \"%Y\") == filter_year)\n\n# Create the graph object from the filtered vip_connections\ng_vip_filtered_2015 <- graph_from_data_frame(d = vip_connections_filtered_2015, directed = TRUE)\n\n# Identify VIPs (nodes_people) and Companies\nV(g_vip_filtered_2015)$type <- ifelse(V(g_vip_filtered_2015)$name %in% nodes_people$id, \"VIP\", \"Company\")\n\n# Define colors and sizes\nV(g_vip_filtered_2015)$color <- ifelse(V(g_vip_filtered_2015)$type == \"VIP\", \"blue\", \"orange\")\nV(g_vip_filtered_2015)$size <- ifelse(V(g_vip_filtered_2015)$type == \"VIP\", 8, 5)\n\n# Plot the network\np2015 <- plot(g_vip_filtered_2015, vertex.label = NA, vertex.size = V(g_vip_filtered_2015)$size, edge.arrow.size = 0.5, \n     vertex.color = V(g_vip_filtered_2015)$color, main = paste(\"VIP Connections Network for\", filter_year))\n```\n\n::: {.cell-output-display}\n![](Q3_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nBy 2015, the network has grown denser, suggesting increased interconnectedness and influence consolidation. More VIPs are connected to multiple companies (orange nodes), indicating a significant rise in their influence and control over the network.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify the year\nfilter_year <- 2025\n\n# Filter vip_connections by start_year\nvip_connections_filtered_2025 <- vip_connections %>%\n  filter(format(start_date, \"%Y\") == filter_year)\n\n# Create the graph object from the filtered vip_connections\ng_vip_filtered_2025 <- graph_from_data_frame(d = vip_connections_filtered_2025, directed = TRUE)\n\n# Identify VIPs (nodes_people) and Companies\nV(g_vip_filtered_2025)$type <- ifelse(V(g_vip_filtered_2025)$name %in% nodes_people$id, \"VIP\", \"Company\")\n\n# Define colors and sizes\nV(g_vip_filtered_2025)$color <- ifelse(V(g_vip_filtered_2025)$type == \"VIP\", \"blue\", \"orange\")\nV(g_vip_filtered_2025)$size <- ifelse(V(g_vip_filtered_2025)$type == \"VIP\", 8, 5)\n\n# Plot the network\np2025 <- plot(g_vip_filtered_2025, vertex.label = NA, vertex.size = V(g_vip_filtered_2025)$size, edge.arrow.size = 0.5, \n     vertex.color = V(g_vip_filtered_2025)$color, main = paste(\"VIP Connections Network for\", filter_year))\n```\n\n::: {.cell-output-display}\n![](Q3_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nThe network continues to expand in 2025, displaying even more complexity and interconnections. This period likely represents a peak in influence for several VIPs, with many of them owning shares in numerous companies, suggesting increased market control.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Specify the year\nfilter_year <- 2035\n\n# Filter vip_connections by start_year\nvip_connections_filtered_2035 <- vip_connections %>%\n  filter(format(start_date, \"%Y\") == filter_year)\n\n# Create the graph object from the filtered vip_connections\ng_vip_filtered_2035 <- graph_from_data_frame(d = vip_connections_filtered_2035, directed = TRUE)\n\n# Identify VIPs (nodes_people) and Companies\nV(g_vip_filtered_2035)$type <- ifelse(V(g_vip_filtered_2035)$name %in% nodes_people$id, \"VIP\", \"Company\")\n\n# Define colors and sizes\nV(g_vip_filtered_2035)$color <- ifelse(V(g_vip_filtered_2035)$type == \"VIP\", \"blue\", \"orange\")\nV(g_vip_filtered_2035)$size <- ifelse(V(g_vip_filtered_2035)$type == \"VIP\", 8, 5)\n\n# Plot the network\np2035 <- plot(g_vip_filtered_2035, vertex.label = NA, vertex.size = V(g_vip_filtered_2035)$size, edge.arrow.size = 0.5, \n     vertex.color = V(g_vip_filtered_2035)$color, main = paste(\"VIP Connections Network for\", filter_year))\n```\n\n::: {.cell-output-display}\n![](Q3_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nIn 2035, the network structure shifts to a star-like formation, where a central VIP appears to have gained substantial influence, with direct connections to numerous companies. This indicates a significant consolidation of power and influence, where a few key players dominate the network.\n\n::: callout-caution\nInitially, influence is distributed among several key players, but over the years, it becomes concentrated among fewer individuals, leading to a highly centralized network by 2035. This centralization of power can be both an opportunity for streamlined decision-making and a risk for monopolistic control. Monitoring these changes is crucial for regulatory bodies like FishEye to ensure fair practices and prevent illegal activities within the network.\n:::\n",
    "supporting": [
      "Q3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}