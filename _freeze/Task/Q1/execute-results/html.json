{
  "hash": "2259db7d4a2d3f0053d246c946b36749",
  "result": {
    "markdown": "---\ntitle: \"Vast Challenge 2024: Question 1\"\nauthor: \"Alicia Loh\"\ndate: \"May 10, 2024\"\ndate-modified: last-modified\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# Task\n\nA key element in stopping illegal fishing is holding the people who own nefarious companies accountable. Thus, FishEye is keenly interested in developing visualization tools that work with CatchNet to identify the people who hold influence over business networks. That is especially difficult with varied and changing shareholder and ownership relationships.\n\n1.  FishEye analysts want to better visualize changes in corporate structures over time. Create a visual analytics approach that analysts can use to highlight temporal patterns and changes in corporate structures. Examine the most active people and businesses using visual analytics.\n\nNote: the VAST challenge is focused on visual analytics and graphical figures should be included with your response to each question. Please include a reasonable number of figures for each question (no more than about 6) and keep written responses as brief as possible (around 250 words per question). Participants are encouraged to new visual representations rather than relying on traditional or existing approaches.\n\n# Getting Started\n\n## Installing and loading the required libraries\n\nNote: Ensure that the [pacman](https://cran.r-project.org/web/packages/pacman/) package has already been installed.\n\nThe following R packages will be used:\n\n-   tidytext\n\n-   tidyverse\n\n-   readtext\n\n-   quanteda\n\n-   jsonlite\n\n-   igraph\n\n-   tidygraph\n\n-   ggraph\n\n-   visNetwork\n\n-   [clock](https://cran.r-project.org/web/packages/clock/index.html)\n\n-   graphlayouts\n\n-   plotly\n\n-   ggiraph\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidytext, readtext, quanteda, tidyverse, jsonlite, igraph, tidygraph, ggraph, visNetwork, clock, graphlayouts,plotly,ggiraph)\n```\n:::\n\n\n## **Importing JSON File**\n\nDirect import of the mc3.json file shows an error message indicating that there's an invalid character in the JSON text, specifically \"NaN\". As \"NaN\" is not recognised as a valid value, preprocessing of the JSON file to replace \"NaN\" is required.\n\nIn the code chunk below, *mc3.json* is first imported, then all instances of \"NaN\" are replaced with \"null\", and the processed file is written into a json file *mc3_fixed.json* for later use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read the JSON file as text\njson_text <- readLines(\"data/mc3.json\")\n\n# Replace \"NaN\" with \"null\"\njson_text_fixed <- gsub(\"NaN\", \"null\", json_text)\n\n# Write the fixed JSON text back to a file\nwriteLines(json_text_fixed, \"data/mc3_fixed.json\")\n```\n:::\n\n\nImporting preprocessed mc3_fixed.json file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_data <- fromJSON(\"data/mc3_fixed.json\")\n```\n:::\n\n\nCheck dataframe\n\n-   Opens new tabs within R workspace, not shown in website\n\n-   Example of the view is shown in the screenshot tab below\n\n::: panel-tabset\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nview(mc3_data[[\"nodes\"]])\nview(mc3_data[[\"links\"]])\n```\n:::\n\n\n## Screenshot Example\n\nmc3_data\\[\\[\"nodes'\\]\n\n![](images/clipboard-1212461262.png)\n\n![](images/clipboard-3963926457.png)\n\nmc3_data\\[\\[\"links\"\\]\\]\n\n![](images/clipboard-2580708180.png)\n\n![](images/clipboard-3147037567.png)\n:::\n\nView dataframe\n\n-   Similar info as shown above\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc3_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     : Named list()\n $ nodes     :'data.frame':\t60520 obs. of  15 variables:\n  ..$ type             : chr [1:60520] \"Entity.Organization.Company\" \"Entity.Organization.Company\" \"Entity.Organization.Company\" \"Entity.Organization.Company\" ...\n  ..$ country          : chr [1:60520] \"Uziland\" \"Mawalara\" \"Uzifrica\" \"Islavaragon\" ...\n  ..$ ProductServices  : chr [1:60520] \"Unknown\" \"Furniture and home accessories\" \"Food products\" \"Unknown\" ...\n  ..$ PointOfContact   : chr [1:60520] \"Rebecca Lewis\" \"Michael Lopez\" \"Steven Robertson\" \"Anthony Wyatt\" ...\n  ..$ HeadOfOrg        : chr [1:60520] \"Émilie-Susan Benoit\" \"Honoré Lemoine\" \"Jules Labbé\" \"Dr. Víctor Hurtado\" ...\n  ..$ founding_date    : chr [1:60520] \"1954-04-24T00:00:00\" \"2009-06-12T00:00:00\" \"2029-12-15T00:00:00\" \"1972-02-16T00:00:00\" ...\n  ..$ revenue          : num [1:60520] 5995 71767 0 0 4747 ...\n  ..$ TradeDescription : chr [1:60520] \"Unknown\" \"Abbott-Gomez is a leading manufacturer and supplier of high-quality furniture and home accessories, catering to\"| __truncated__ \"Abbott-Harrison is a leading manufacturer of high-quality food products, including baked goods, snacks, and bev\"| __truncated__ \"Unknown\" ...\n  ..$ _last_edited_by  : chr [1:60520] \"Pelagia Alethea Mordoch\" \"Pelagia Alethea Mordoch\" \"Pelagia Alethea Mordoch\" \"Pelagia Alethea Mordoch\" ...\n  ..$ _last_edited_date: chr [1:60520] \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" ...\n  ..$ _date_added      : chr [1:60520] \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" ...\n  ..$ _raw_source      : chr [1:60520] \"Existing Corporate Structure Data\" \"Existing Corporate Structure Data\" \"Existing Corporate Structure Data\" \"Existing Corporate Structure Data\" ...\n  ..$ _algorithm       : chr [1:60520] \"Automatic Import\" \"Automatic Import\" \"Automatic Import\" \"Automatic Import\" ...\n  ..$ id               : chr [1:60520] \"Abbott, Mcbride and Edwards\" \"Abbott-Gomez\" \"Abbott-Harrison\" \"Abbott-Ibarra\" ...\n  ..$ dob              : chr [1:60520] NA NA NA NA ...\n $ links     :'data.frame':\t75817 obs. of  11 variables:\n  ..$ start_date       : chr [1:75817] \"2016-10-29T00:00:00\" \"2035-06-03T00:00:00\" \"2028-11-20T00:00:00\" \"2024-09-04T00:00:00\" ...\n  ..$ type             : chr [1:75817] \"Event.Owns.Shareholdership\" \"Event.Owns.Shareholdership\" \"Event.Owns.Shareholdership\" \"Event.Owns.Shareholdership\" ...\n  ..$ _last_edited_by  : chr [1:75817] \"Pelagia Alethea Mordoch\" \"Niklaus Oberon\" \"Pelagia Alethea Mordoch\" \"Pelagia Alethea Mordoch\" ...\n  ..$ _last_edited_date: chr [1:75817] \"2035-01-01T00:00:00\" \"2035-07-15T00:00:00\" \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" ...\n  ..$ _date_added      : chr [1:75817] \"2035-01-01T00:00:00\" \"2035-07-15T00:00:00\" \"2035-01-01T00:00:00\" \"2035-01-01T00:00:00\" ...\n  ..$ _raw_source      : chr [1:75817] \"Existing Corporate Structure Data\" \"Oceanus Corporations Monthly - Jun '35\" \"Existing Corporate Structure Data\" \"Existing Corporate Structure Data\" ...\n  ..$ _algorithm       : chr [1:75817] \"Automatic Import\" \"Manual Entry\" \"Automatic Import\" \"Automatic Import\" ...\n  ..$ source           : chr [1:75817] \"Avery Inc\" \"Berger-Hayes\" \"Bowers Group\" \"Bowman-Howe\" ...\n  ..$ target           : chr [1:75817] \"Allen, Nichols and Thompson\" \"Jensen, Morris and Downs\" \"Barnett Inc\" \"Bennett Ltd\" ...\n  ..$ key              : int [1:75817] 0 0 0 0 0 0 0 0 0 0 ...\n  ..$ end_date         : chr [1:75817] NA NA NA NA ...\n```\n:::\n:::\n\n\n::: callout-note\nmc3_date\\[\\[\"nodes\"\\]\\] dataframe contains 15 columns and 60520 rows.\n\nmc3_date\\[\\[\"links\"\\]\\] dataframe contains 11 columns and 75817 rows.\n:::\n\n::: callout-note\nOn closer inspection of `mc3_data`, we note some issues to be rectified:\n\n1.  Columns containing dates are treated as “Character” data type instead of *date* data type, which is incorrect. Thus, the data type of the following fields need to be changed to “Date”” data type:\n    -   founding_date\n    -   \\_last_edited_date\n    -   \\_date_added\n    -   start_date\n    -   \\_last_edited_date\n    -   \\_date_added\n    -   dob\n2.  Some columns have missing values, which need to be handled appropriately for ease of later analysis.\n3.  Some columns are prefixed with \"\\_\", we remove them to reduce chance of bugs later\n:::\n\n## Missing Values\n\nIdentify the percentage of missing values within the dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to calculate missing value percentages\ncalculate_missing_percentage <- function(df) {\n  total_values <- nrow(df) * ncol(df)\n  missing_values <- sum(is.na(df))\n  missing_percentage <- (missing_values / total_values) * 100\n  return(missing_percentage)\n}\n```\n:::\n\n\n::: panel-tabset\n## Nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_missing_percentage <- calculate_missing_percentage(mc3_data[[\"nodes\"]])\nnodes_missing_percentage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 35.11952\n```\n:::\n\n```{.r .cell-code}\nnodes_missing_by_column <- sapply(mc3_data[[\"nodes\"]], function(x) sum(is.na(x)) / length(x) * 100)\nnodes_missing_by_column\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             type           country   ProductServices    PointOfContact \n          0.00000           0.00000          85.34204          85.38334 \n        HeadOfOrg     founding_date           revenue  TradeDescription \n         85.35691          85.34204          85.36847          85.34204 \n  _last_edited_by _last_edited_date       _date_added       _raw_source \n          0.00000           0.00000           0.00000           0.00000 \n       _algorithm                id               dob \n          0.00000           0.00000          14.65796 \n```\n:::\n:::\n\n\n## Links\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinks_missing_percentage <- calculate_missing_percentage(mc3_data[[\"links\"]])\nlinks_missing_percentage\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9.059973\n```\n:::\n\n```{.r .cell-code}\nlinks_missing_by_column <- sapply(mc3_data[[\"links\"]], function(x) sum(is.na(x)) / length(x) * 100)\nlinks_missing_by_column\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       start_date              type   _last_edited_by _last_edited_date \n        0.1187069         0.0000000         0.0000000         0.0000000 \n      _date_added       _raw_source        _algorithm            source \n        0.0000000         0.0000000         0.0000000         0.0000000 \n           target               key          end_date \n        0.0000000         0.0000000        99.5410000 \n```\n:::\n:::\n\n:::\n\n::: callout-note\nNodes: Overall, there are 35.12% missing values. While most columns have no missing values, the majority of those with missing data pertain to optional attributes:\n\n-   ProductServices (Optional) - 85.34%\n\n-   PointOfContact (Optional)- 85.38%\n\n-   HeadofOrg (Optional) - 85.36%\n\n-   founding_date - 85.34%\n\n-   revenue (Optional) - 85.37%\n\n-   TradeDescription (Optional) - 85.34%\n\n-   dob - 14.66%\n\nLinks: Overall, there are 9.06% missing values. Most of the columns do not contain missing values, except for:\n\n-   start_date - 0.12%\n\n-   end_date (Optional) - 99.54%\n\nIn addition, according to the *VAST2024 - MC3 Data Description* file, all empty values in the revenue column are supposed to have been set to 0. However, there are still some values with \"NA\".\n:::\n\n## Setting empty values in *`revenue`* to 0\n\nSet NA values to 0 to aid analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a copy of mc3_data\nmc3_data2 <- mc3_data\n\n# Set empty values in revenue to 0 and save it to the new list\nmc3_data2$nodes$revenue <- ifelse(is.na(mc3_data2$nodes$revenue) | mc3_data2$nodes$revenue == \"\", 0, mc3_data2$nodes$revenue)\n```\n:::\n\n\nVerify changes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ensure no more missing values in revenue column\nsum(is.na(mc3_data2$nodes$revenue))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n:::\n\n\n## Rename Columns\n\nRemove prefix \"\\_\" from columns to reduce chance of issues later\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to remove leading underscores from column names\nremove_leading_underscores <- function(df) {\n  colnames(df) <- gsub(\"^_\", \"\", colnames(df))\n  return(df)\n}\n\n# Create a copy of mc3_data2 and name it mc3_data3\nmc3_data3 <- mc3_data2\n\n# Apply the function to the nodes and links data frames in mc3_data3\nmc3_data3$nodes <- remove_leading_underscores(mc3_data3$nodes)\nmc3_data3$links <- remove_leading_underscores(mc3_data3$links)\n```\n:::\n\n\nVerify changes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(mc3_data3$nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"type\"             \"country\"          \"ProductServices\"  \"PointOfContact\"  \n [5] \"HeadOfOrg\"        \"founding_date\"    \"revenue\"          \"TradeDescription\"\n [9] \"last_edited_by\"   \"last_edited_date\" \"date_added\"       \"raw_source\"      \n[13] \"algorithm\"        \"id\"               \"dob\"             \n```\n:::\n\n```{.r .cell-code}\ncolnames(mc3_data3$links)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"start_date\"       \"type\"             \"last_edited_by\"   \"last_edited_date\"\n [5] \"date_added\"       \"raw_source\"       \"algorithm\"        \"source\"          \n [9] \"target\"           \"key\"              \"end_date\"        \n```\n:::\n:::\n\n\n## Standardising Date Time Formats\n\nIn preparation for temporal analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a copy of mc3_data3 and name it mc3_data4\nmc3_data4 <- mc3_data3\n\n# Convert date columns to Date-Time type\nmc3_data4$nodes <- mc3_data4$nodes %>%\n  mutate(\n    founding_date = ymd_hms(founding_date),\n    last_edited_date = ymd_hms(last_edited_date),\n    date_added = ymd_hms(date_added),\n    dob = ymd_hms(dob)\n  )\n\nmc3_data4$links <- mc3_data4$links %>%\n  mutate(\n    start_date = ymd_hms(start_date),\n    last_edited_date = ymd_hms(last_edited_date),\n    date_added = ymd_hms(date_added),\n    end_date = ymd_hms(end_date)\n  )\n```\n:::\n\n\n::: callout-note\nThe `ymd_hms` function is designed to work with character vectors and will return `NA` for any existing `NA` values. This means that any `NA` value in the original columns will remain `NA` after the conversion.\n:::\n\nVerify changes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# View the first few rows of the date columns in nodes\nhead(mc3_data4$nodes %>% select(founding_date, last_edited_date, date_added, dob))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  founding_date last_edited_date date_added  dob\n1    1954-04-24       2035-01-01 2035-01-01 <NA>\n2    2009-06-12       2035-01-01 2035-01-01 <NA>\n3    2029-12-15       2035-01-01 2035-01-01 <NA>\n4    1972-02-16       2035-01-01 2035-01-01 <NA>\n5    1954-04-06       2035-01-01 2035-01-01 <NA>\n6    2031-09-30       2035-01-01 2035-01-01 <NA>\n```\n:::\n\n```{.r .cell-code}\n# View the first few rows of the date columns in links\nhead(mc3_data4$links %>% select(start_date))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  start_date\n1 2016-10-29\n2 2035-06-03\n3 2028-11-20\n4 2024-09-04\n5 2034-11-12\n6 2007-04-06\n```\n:::\n\n```{.r .cell-code}\n# Summary of date columns in nodes\nsummary(mc3_data4$nodes %>% select(founding_date, last_edited_date, date_added, dob))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n founding_date                     last_edited_date               \n Min.   :1945-01-01 00:00:00.000   Min.   :2035-01-01 00:00:00.0  \n 1st Qu.:1968-01-11 00:00:00.000   1st Qu.:2035-01-01 00:00:00.0  \n Median :1991-07-03 00:00:00.000   Median :2035-01-01 00:00:00.0  \n Mean   :1991-04-22 15:54:58.072   Mean   :2035-01-02 10:34:13.4  \n 3rd Qu.:2014-09-04 12:00:00.000   3rd Qu.:2035-01-01 00:00:00.0  \n Max.   :2035-12-29 00:00:00.000   Max.   :2036-01-15 00:00:00.0  \n NA's   :51649                                                    \n   date_added                         dob                         \n Min.   :2035-01-01 00:00:00.0   Min.   :1970-01-02 00:00:00.000  \n 1st Qu.:2035-01-01 00:00:00.0   1st Qu.:1978-01-30 00:00:00.000  \n Median :2035-01-01 00:00:00.0   Median :1986-02-06 00:00:00.000  \n Mean   :2035-01-02 10:28:32.2   Mean   :1987-05-23 22:21:33.182  \n 3rd Qu.:2035-01-01 00:00:00.0   3rd Qu.:1995-05-13 00:00:00.000  \n Max.   :2036-01-15 00:00:00.0   Max.   :2017-03-20 00:00:00.000  \n                                 NA's   :9047                     \n```\n:::\n\n```{.r .cell-code}\n# Summary of date columns in links\nsummary(mc3_data4$links %>% select(start_date))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   start_date                    \n Min.   :1952-05-31 00:00:00.00  \n 1st Qu.:2015-08-18 00:00:00.00  \n Median :2024-03-22 00:00:00.00  \n Mean   :2022-11-23 10:50:43.11  \n 3rd Qu.:2030-12-13 00:00:00.00  \n Max.   :2035-12-29 00:00:00.00  \n NA's   :14720                   \n```\n:::\n\n```{.r .cell-code}\n# Check the types of the date columns in nodes\nstr(mc3_data4$nodes %>% select(founding_date, last_edited_date, date_added, dob))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t60520 obs. of  4 variables:\n $ founding_date   : POSIXct, format: \"1954-04-24\" \"2009-06-12\" ...\n $ last_edited_date: POSIXct, format: \"2035-01-01\" \"2035-01-01\" ...\n $ date_added      : POSIXct, format: \"2035-01-01\" \"2035-01-01\" ...\n $ dob             : POSIXct, format: NA NA ...\n```\n:::\n\n```{.r .cell-code}\n# Check the types of the date columns in links\nstr(mc3_data4$links %>% select(start_date))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t75817 obs. of  1 variable:\n $ start_date: POSIXct, format: \"2016-10-29\" \"2035-06-03\" ...\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nview(mc3_data4[[\"nodes\"]])\nview(mc3_data4[[\"links\"]])\n```\n:::\n\n\n## Split Words\n\nThe steps below will be used to split text in type column of **nodes** into two columns: namely type1 and type2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a copy of mc3_data4\nmc3_data5 <- mc3_data4\n\n# Split the type column into two columns\nmc3_data5$nodes <- mc3_data5$nodes %>%\n  mutate(\n    type1 = sub(\"^(\\\\S+).*\", \"\\\\1\", type),\n    type2 = sub(\"^\\\\S+\\\\.(.*)\", \"\\\\1\", type)\n  )\n\n# If there's only one word in type, set type2 to NA\nmc3_data5$nodes$type2 <- ifelse(grepl(\"\\\\.\", mc3_data5$nodes$type), mc3_data5$nodes$type2, NA)\n\n# Remove the original 'type' column\nmc3_data5$nodes <- mc3_data5$nodes %>%\n  select(-type)\n```\n:::\n\n\nThe steps below will be used to split text in type column of **links** into two columns: namely type1 and type2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a copy of mc3_data4\nmc3_data6 <- mc3_data5\n\n# Split the type column into two columns\n# There are no special cases, exception left blank\nmc3_data6$links <- mc3_data6$links %>%\n  mutate(\n    type1 = sub(\"(.*?\\\\..*?)(\\\\.[^.]+)?$\", \"\\\\1\", type),\n    type2 = ifelse(grepl(\"\\\\.\", type), sub(\".*\\\\.\", \"\", type), \"\")\n  )\n\n# remove the original 'type' column\nmc3_data6$links <- mc3_data6$links %>%\n  select(-type)\n```\n:::\n\n\nVerify changes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# View the first few rows of the type columns in nodes\nhead(mc3_data6$nodes %>% select(type1,type2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                        type1   type2\n1 Entity.Organization.Company Company\n2 Entity.Organization.Company Company\n3 Entity.Organization.Company Company\n4 Entity.Organization.Company Company\n5 Entity.Organization.Company Company\n6 Entity.Organization.Company Company\n```\n:::\n\n```{.r .cell-code}\n# View the first few rows of the type columns in links\nhead(mc3_data6$links %>% select(type1,type2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       type1           type2\n1 Event.Owns Shareholdership\n2 Event.Owns Shareholdership\n3 Event.Owns Shareholdership\n4 Event.Owns Shareholdership\n5 Event.Owns Shareholdership\n6 Event.Owns Shareholdership\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nview(mc3_data6[[\"nodes\"]])\nview(mc3_data6[[\"links\"]])\n```\n:::\n\n\n## Extract Nodes\n\nFor Question 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#keep only necessary columns\nmc3_nodes_1 <- as_tibble(mc3_data6$nodes) %>%\n  select (-TradeDescription,\n          -last_edited_by,\n          -last_edited_date,\n          -algorithm,\n          -dob,\n          -type1)\n```\n:::\n\n\nSave as rds file for future use\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mc3_nodes_1, \"data/rds/mc3_nodes_1.rds\")\n```\n:::\n\n\n## Extract Links\n\nFor Question 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_links_1 <- as_tibble(mc3_data6$links) %>%\n  select (-last_edited_by,\n          -last_edited_date,\n          -date_added,\n          -key,\n          -algorithm,\n          -type1,\n          -end_date)\n```\n:::\n\n\nSave as rds file for future use\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mc3_links_1, \"data/rds/mc3_links_1.rds\")\n```\n:::\n\n\n# Load Data\n\nLoad rds file\n\nNote: rds files can be loaded independently of the data wrangling steps above to save time\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_links_1 <- readRDS(\"data/rds/mc3_links_1.rds\")\nmc3_nodes_1 <- readRDS(\"data/rds/mc3_nodes_1.rds\")\n```\n:::\n\n\n# Changes in Corporate Structures Over Time\n\nThe plot shows how transaction volume changes over time, which helps identify periods of increased or decreased activity\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntransactions_over_time <- mc3_links_1 %>%\n  group_by(start_date) %>%\n  summarize(count = n()) %>%\n  drop_na()\n```\n:::\n\n\n## Number of Transactions over Time\n\nNumber of links can be used to determine transactions over time\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Q1_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(transactions_over_time, aes(x = start_date, y = count)) +\n  geom_line() +\n  labs(title = \"Transactions Over Time\", x = \"Date\", y = \"Number of Transactions\")\n```\n:::\n\n:::\n\n::: callout-note\nThe dataset spans from year 1952 to 2035.\n\nWe can see that from the start of the dataset until about year 2000, there were relatively few transactions. There was a small spike after year 2000, proceeded by exponential growth around 2005. However, there was a dip in transactions in 2035.\n\nThe dip could be due to effects after SouthSeafood Express Corp was caught for illegal behaviour and eventually closed in 2035.\n\nAnalysis should focus on transactions from year 2005 onwards. Data analysed should also be aggregated by year.\n:::\n\n### Filter data\n\nFilter data to only keep transactions from 2000 (5 years before 2005) to 2035 (end of dataset). We keep some data that occurs before the start of our period of interest to capture any recent changes to entities.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter the data frames to keep only data from the year 2000 and onwards\nmc3_links_1_filtered <- mc3_links_1 %>%\n  filter(start_date >= as.Date(\"2000-01-01\"))\n```\n:::\n\n\n### Aggregate Data by Year\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract year for aggregation\nmc3_links_1_filtered2 <- mc3_links_1_filtered %>%\n  mutate(transaction_year = year(start_date))\n\n# Calculate the number of transactions per year\nyearly_txns <- mc3_links_1_filtered2 %>%\n  group_by(transaction_year) %>%\n  summarise(num_transactions = n())\n```\n:::\n\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Q1_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the number of transactions per year\nggplot(yearly_txns, aes(x = transaction_year, y = num_transactions)) +\n  geom_line(color = \"blue\") +\n  labs(title = \"Number of Transactions Per Year\",\n       x = \"Year\",\n       y = \"Number of Transactions\") +\n  theme_minimal()\n```\n:::\n\n:::\n\n::: callout-note\nIt is now clearer that the rapid growth in transactions started around 2005, before reaching its peak at 2034 and sharply dropping in 2035, likely due to after effects of the SouthSeafood Express Corp incident.\n:::\n\n## Number of Active Companies Per Year\n\nDrop na values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes2_1 <- mc3_nodes_1 %>%\n  drop_na(founding_date) # removes Persons and Persons CEO\n```\n:::\n\n\nNumber of nodes can be used to determine the number of active companies per year.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract year for aggregation\nmc3_nodes3_1 <- mc3_nodes2_1 %>%\n  mutate(active_year = floor_date(founding_date, \"year\"))\n\n# Calculate the number of active companies per year\nactive_companies <- mc3_nodes3_1 %>%\n  group_by(active_year) %>%\n  summarise(num_active_companies = n())\n```\n:::\n\n\nSummary\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the summary statistics\nsummary_stats <- summary(active_companies$num_active_companies)\nsummary_stats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  79.00   88.50   96.00   97.48  104.00  136.00 \n```\n:::\n\n```{.r .cell-code}\n# Extract and save the mean\n# Round to 2 decimal places\nmean_active_companies <- round(summary_stats[\"Mean\"], 2)\n```\n:::\n\n\nPlot graph\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Q1_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the number of active companies over time\nggplot(active_companies, aes(x = active_year, y = num_active_companies)) +\n  # line plot\n  geom_line(color = \"darkgreen\") +\n  labs(title = \"Number of Active Companies Over Time\",\n       x = \"Date\",\n       y = \"Number of Active Companies\") +\n  # mean line\n  geom_hline(aes(yintercept = mean_active_companies), \n             linetype = \"dotted\", color = \"blue\") +\n  annotate(\"text\", x = min(active_companies$active_year), \n           y = mean_active_companies, \n           label = paste(\"Mean:\", mean_active_companies), \n           hjust = 0, vjust = -1, color = \"blue\") +\n  theme_minimal()\n```\n:::\n\n:::\n\n::: callout-note\nWhile there are fluctuations in the number of active companies over time, there is generally an increasing trend of the number of active companies over time, especially around 2010 onwards. This period shows a rising trend with the number of active companies reaching the highest values in the dataset. This is similar to that observed in the number of transactions over time, seen above.\n\nWe also see a dip around 2035, before the numbers increase again. Also likely due to the after effects of the SouthSeafood Express Corp incident.\n:::\n\n## Centrality Measures\n\n### **Modifying network nodes and edges**\n\nPrepare the **`edges`** dataframe for network analysis by:\n\n-   Ensuring all edges are unique.\n\n-   Converting columns to a uniform type.\n\n-   Calculating the weight of each edge (how many times each connection occurs).\n\n-   Removing any self-loops.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges <-\n  as_tibble(mc3_links_1_filtered2) %>%\n  distinct() %>%\n  mutate(source = as.character(source),\n         target = as.character(target),\n         type = as.character(type2),\n         tyear = as.integer(transaction_year)) %>%\n  group_by(source, target, type,tyear) %>%\n  summarise(weights = n()) %>%\n  filter(source != target) %>%\n  ungroup()\n```\n:::\n\n\n::: callout-note\nThe resulting **`mc3_edges`** tibble contains the columns **`source`**, **`target`**, **`type`**, **`year`**, and **`weights`**, where each row represents a unique edge between two nodes with a specific type, and the **`weights`** column represents the number of times that edge occurs.\n:::\n\nClean and preprocess the **`nodes`** data by:\n\n-   Ensuring that each column has the correct data type for analysis.\n\n-   Selecting only the necessary columns for further analysis or visualization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes <- as_tibble(mc3_nodes_1) %>%\n  mutate(country = as.character(country), \n         id = as.character(id), \n         ProductServices = as.character(ProductServices), \n         revenue = as.numeric(as.character(revenue)), \n         type = as.character(type2)) %>%\n  select(id, country, type, revenue, ProductServices)\n```\n:::\n\n\n::: callout-note\nThe resulting **`mc3_nodes`** tibble contains the cleaned and correctly typed columns **`id`**, **`country`**, **`type`**, **`revenue`**, and **`ProductServices`**.\n:::\n\n### Keeping unique values\n\nEdges\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique_transaction_types_edges <- mc3_edges %>%\n  select(type) %>%\n  distinct()\n\n# Display the unique transaction types\nprint(unique_transaction_types_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 1\n  type               \n  <chr>              \n1 Shareholdership    \n2 BeneficialOwnership\n3 WorksFor           \n4 FamilyRelationship \n```\n:::\n:::\n\n\n::: callout-note\nThere are 4 types of edges, namely:\n\n-   Shareholdership\n\n-   WorksFor\n\n-   BeneficialOwnership\n\n-   FamilyRelationship\n:::\n\nNodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique_transaction_types_nodes <- mc3_nodes %>%\n  select(type) %>%\n  distinct()\n\n# Display the unique transaction types\nprint(unique_transaction_types_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 8 × 1\n  type            \n  <chr>           \n1 Company         \n2 LogisticsCompany\n3 FishingCompany  \n4 FinancialCompany\n5 NewsCompany     \n6 NGO             \n7 Person          \n8 CEO             \n```\n:::\n:::\n\n\n::: callout-note\nThere are 8 types of nodes, namely:\n\n-   Company\n\n-   LogisticsCompany\n\n-   FishingCompany\n\n-   FinancialCompany\n\n-   NewsCompany\n\n-   NGO\n\n-   Person\n\n-   CEO\n:::\n\n### Extract all the source and target nodes\n\nExtract all the source and target nodes, then, drop any unmatched nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nid1 <- mc3_edges %>%\n  select(source) %>%\n  rename(id = source)\n\nid2 <- mc3_edges %>%\n  select(target) %>%\n  rename(id = target)\n\nmc3_nodes1 <- rbind(id1, id2) %>%\n  distinct() %>%\n  left_join(mc3_nodes, by = c(\"id\" = \"id\")) %>%\n  mutate(unmatched = \"drop\")\n```\n:::\n\n\nVerify results\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(mc3_nodes1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 60,489 × 6\n   id                     country     type     revenue ProductServices unmatched\n   <chr>                  <chr>       <chr>      <dbl> <chr>           <chr>    \n 1 4. SeaCargo Ges.m.b.H. Oceanus     Logisti…  23304. Tuna, sword fi… drop     \n 2 9. RiverLine CJSC      Oceanus     Company   50134. Unknown         drop     \n 3 Aaron Acosta           Mawalara    Person        0  <NA>            drop     \n 4 Aaron Allen            Galduzim    Person        0  <NA>            drop     \n 5 Aaron Austin           Kethilim    Person        0  <NA>            drop     \n 6 Aaron Baker            Azurionix   Person        0  <NA>            drop     \n 7 Aaron Barry            Kondanovia  Person        0  <NA>            drop     \n 8 Aaron Bauer            Rio Solovia Person        0  <NA>            drop     \n 9 Aaron Bishop           Osterivaro  Person        0  <NA>            drop     \n10 Aaron Bolton           n.a.        Person        0  <NA>            drop     \n# ℹ 60,479 more rows\n```\n:::\n:::\n\n\n### Create Graph Object\n\nCreate graph object and calculate centrality measures\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_graph <- tbl_graph(nodes = mc3_nodes1, edges = mc3_edges, directed = TRUE) %>%\n  mutate(betweenness_centrality = centrality_betweenness(),\n         closeness_centrality = centrality_closeness())\n  theme_graph()\n## List of 136\n##  $ line                            :List of 6\n##   ..$ colour       : chr \"black\"\n##   ..$ linewidth    : num 0.5\n##   ..$ linetype     : num 1\n##   ..$ lineend      : chr \"butt\"\n##   ..$ arrow        : logi FALSE\n##   ..$ inherit.blank: logi TRUE\n##   ..- attr(*, \"class\")= chr [1:2] \"element_line\" \"element\"\n##  $ rect                            :List of 5\n##   ..$ fill         : chr \"white\"\n##   ..$ colour       : chr \"black\"\n##   ..$ linewidth    : num 0.5\n##   ..$ linetype     : num 1\n##   ..$ inherit.blank: logi TRUE\n##   ..- attr(*, \"class\")= chr [1:2] \"element_rect\" \"element\"\n##  $ text                            :List of 11\n##   ..$ family       : chr \"Arial Narrow\"\n##   ..$ face         : chr \"plain\"\n##   ..$ colour       : chr \"black\"\n##   ..$ size         : num 11\n##   ..$ hjust        : num 0.5\n##   ..$ vjust        : num 0.5\n##   ..$ angle        : num 0\n##   ..$ lineheight   : num 0.9\n##   ..$ margin       : 'margin' num [1:4] 0points 0points 0points 0points\n##   .. ..- attr(*, \"unit\")= int 8\n##   ..$ debug        : logi FALSE\n##   ..$ inherit.blank: logi FALSE\n##   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n##  $ title                           : NULL\n##  $ aspect.ratio                    : NULL\n##  $ axis.title                      : list()\n##   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n##  $ axis.title.x                    :List of 11\n##   ..$ family       : NULL\n##   ..$ face         : NULL\n##   ..$ colour       : NULL\n##   ..$ size         : NULL\n##   ..$ hjust        : NULL\n##   ..$ vjust        : num 1\n##   ..$ angle        : NULL\n##   ..$ lineheight   : NULL\n##   ..$ margin       : 'margin' num [1:4] 2.75points 0points 0points 0points\n##   .. ..- attr(*, \"unit\")= int 8\n##   ..$ debug        : NULL\n##   ..$ inherit.blank: logi TRUE\n##   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n##  $ axis.title.x.top                :List of 11\n##   ..$ family       : NULL\n##   ..$ face         : NULL\n##   ..$ colour       : NULL\n##   ..$ size         : NULL\n##   ..$ hjust        : NULL\n##   ..$ vjust        : num 0\n##   ..$ angle        : NULL\n##   ..$ lineheight   : NULL\n##   ..$ margin       : 'margin' num [1:4] 0points 0points 2.75points 0points\n##   .. ..- attr(*, \"unit\")= int 8\n##   ..$ debug        : NULL\n##   ..$ inherit.blank: logi TRUE\n##   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n##  $ axis.title.x.bottom             : NULL\n##  $ axis.title.y                    :List of 11\n##   ..$ family       : NULL\n##   ..$ face         : NULL\n##   ..$ colour       : NULL\n##   ..$ size         : NULL\n##   ..$ hjust        : NULL\n##   ..$ vjust        : num 1\n##   ..$ angle        : num 90\n##   ..$ lineheight   : NULL\n##   ..$ margin       : 'margin' num [1:4] 0points 2.75points 0points 0points\n##   .. ..- attr(*, \"unit\")= int 8\n##   ..$ debug        : NULL\n##   ..$ inherit.blank: logi TRUE\n##   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n##  $ axis.title.y.left               : NULL\n##  $ axis.title.y.right              :List of 11\n##   ..$ family       : NULL\n##   ..$ face         : NULL\n##   ..$ colour       : NULL\n##   ..$ size         : NULL\n##   ..$ hjust        : NULL\n##   ..$ vjust        : num 1\n##   ..$ angle        : num -90\n##   ..$ lineheight   : NULL\n##   ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.75points\n##   .. ..- attr(*, \"unit\")= int 8\n##   ..$ debug        : NULL\n##   ..$ inherit.blank: logi TRUE\n##   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n##  $ axis.text                       : list()\n##   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n##  $ axis.text.x                     :List of 11\n##   ..$ family       : NULL\n##   ..$ face         : NULL\n##   ..$ colour       : NULL\n##   ..$ size         : NULL\n##   ..$ hjust        : NULL\n##   ..$ vjust        : num 1\n##   ..$ angle        : NULL\n##   ..$ lineheight   : NULL\n##   ..$ margin       : 'margin' num [1:4] 2.2points 0points 0points 0points\n##   .. ..- attr(*, \"unit\")= int 8\n##   ..$ debug        : NULL\n##   ..$ inherit.blank: logi TRUE\n##   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n##  $ axis.text.x.top                 :List of 11\n##   ..$ family       : NULL\n##   ..$ face         : NULL\n##   ..$ colour       : NULL\n##   ..$ size         : NULL\n##   ..$ hjust        : NULL\n##   ..$ vjust        : num 0\n##   ..$ angle        : NULL\n##   ..$ lineheight   : NULL\n##   ..$ margin       : 'margin' num [1:4] 0points 0points 2.2points 0points\n##   .. ..- attr(*, \"unit\")= int 8\n##   ..$ debug        : NULL\n##   ..$ inherit.blank: logi TRUE\n##   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n##  $ axis.text.x.bottom              : NULL\n##  $ axis.text.y                     :List of 11\n##   ..$ family       : NULL\n##   ..$ face         : NULL\n##   ..$ colour       : NULL\n##   ..$ size         : NULL\n##   ..$ hjust        : num 1\n##   ..$ vjust        : NULL\n##   ..$ angle        : NULL\n##   ..$ lineheight   : NULL\n##   ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 0points\n##   .. ..- attr(*, \"unit\")= int 8\n##   ..$ debug        : NULL\n##   ..$ inherit.blank: logi TRUE\n##   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n##  $ axis.text.y.left                : NULL\n##  $ axis.text.y.right               :List of 11\n##   ..$ family       : NULL\n##   ..$ face         : NULL\n##   ..$ colour       : NULL\n##   ..$ size         : NULL\n##   ..$ hjust        : num 0\n##   ..$ vjust        : NULL\n##   ..$ angle        : NULL\n##   ..$ lineheight   : NULL\n##   ..$ margin       : 'margin' num [1:4] 0points 0points 0points 2.2points\n##   .. ..- attr(*, \"unit\")= int 8\n##   ..$ debug        : NULL\n##   ..$ inherit.blank: logi TRUE\n##   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n##  $ axis.text.theta                 : NULL\n##  $ axis.text.r                     :List of 11\n##   ..$ family       : NULL\n##   ..$ face         : NULL\n##   ..$ colour       : NULL\n##   ..$ size         : NULL\n##   ..$ hjust        : num 0.5\n##   ..$ vjust        : NULL\n##   ..$ angle        : NULL\n##   ..$ lineheight   : NULL\n##   ..$ margin       : 'margin' num [1:4] 0points 2.2points 0points 2.2points\n##   .. ..- attr(*, \"unit\")= int 8\n##   ..$ debug        : NULL\n##   ..$ inherit.blank: logi TRUE\n##   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n##  $ axis.ticks                      : list()\n##   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n##  $ axis.ticks.x                    : NULL\n##  $ axis.ticks.x.top                : NULL\n##  $ axis.ticks.x.bottom             : NULL\n##  $ axis.ticks.y                    : NULL\n##  $ axis.ticks.y.left               : NULL\n##  $ axis.ticks.y.right              : NULL\n##  $ axis.ticks.theta                : NULL\n##  $ axis.ticks.r                    : NULL\n##  $ axis.minor.ticks.x.top          : NULL\n##  $ axis.minor.ticks.x.bottom       : NULL\n##  $ axis.minor.ticks.y.left         : NULL\n##  $ axis.minor.ticks.y.right        : NULL\n##  $ axis.minor.ticks.theta          : NULL\n##  $ axis.minor.ticks.r              : NULL\n##  $ axis.ticks.length               : 'simpleUnit' num 2.75points\n##   ..- attr(*, \"unit\")= int 8\n##  $ axis.ticks.length.x             : NULL\n##  $ axis.ticks.length.x.top         : NULL\n##  $ axis.ticks.length.x.bottom      : NULL\n##  $ axis.ticks.length.y             : NULL\n##  $ axis.ticks.length.y.left        : NULL\n##  $ axis.ticks.length.y.right       : NULL\n##  $ axis.ticks.length.theta         : NULL\n##  $ axis.ticks.length.r             : NULL\n##  $ axis.minor.ticks.length         : 'rel' num 0.75\n##  $ axis.minor.ticks.length.x       : NULL\n##  $ axis.minor.ticks.length.x.top   : NULL\n##  $ axis.minor.ticks.length.x.bottom: NULL\n##  $ axis.minor.ticks.length.y       : NULL\n##  $ axis.minor.ticks.length.y.left  : NULL\n##  $ axis.minor.ticks.length.y.right : NULL\n##  $ axis.minor.ticks.length.theta   : NULL\n##  $ axis.minor.ticks.length.r       : NULL\n##  $ axis.line                       : list()\n##   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n##  $ axis.line.x                     : NULL\n##  $ axis.line.x.top                 : NULL\n##  $ axis.line.x.bottom              : NULL\n##  $ axis.line.y                     : NULL\n##  $ axis.line.y.left                : NULL\n##  $ axis.line.y.right               : NULL\n##  $ axis.line.theta                 : NULL\n##  $ axis.line.r                     : NULL\n##  $ legend.background               : list()\n##   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n##  $ legend.margin                   : 'margin' num [1:4] 5.5points 5.5points 5.5points 5.5points\n##   ..- attr(*, \"unit\")= int 8\n##  $ legend.spacing                  : 'simpleUnit' num 11points\n##   ..- attr(*, \"unit\")= int 8\n##  $ legend.spacing.x                : NULL\n##  $ legend.spacing.y                : NULL\n##  $ legend.key                      : list()\n##   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n##  $ legend.key.size                 : 'simpleUnit' num 1.2lines\n##   ..- attr(*, \"unit\")= int 3\n##  $ legend.key.height               : NULL\n##  $ legend.key.width                : NULL\n##  $ legend.key.spacing              : 'simpleUnit' num 5.5points\n##   ..- attr(*, \"unit\")= int 8\n##  $ legend.key.spacing.x            : NULL\n##  $ legend.key.spacing.y            : NULL\n##  $ legend.frame                    : NULL\n##  $ legend.ticks                    : NULL\n##  $ legend.ticks.length             : 'rel' num 0.2\n##  $ legend.axis.line                : NULL\n##  $ legend.text                     :List of 11\n##   ..$ family       : NULL\n##   ..$ face         : NULL\n##   ..$ colour       : NULL\n##   ..$ size         : 'rel' num 0.8\n##   ..$ hjust        : NULL\n##   ..$ vjust        : NULL\n##   ..$ angle        : NULL\n##   ..$ lineheight   : NULL\n##   ..$ margin       : NULL\n##   ..$ debug        : NULL\n##   ..$ inherit.blank: logi TRUE\n##   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n##  $ legend.text.position            : NULL\n##  $ legend.title                    :List of 11\n##   ..$ family       : NULL\n##   ..$ face         : NULL\n##   ..$ colour       : NULL\n##   ..$ size         : NULL\n##   ..$ hjust        : num 0\n##   ..$ vjust        : NULL\n##   ..$ angle        : NULL\n##   ..$ lineheight   : NULL\n##   ..$ margin       : NULL\n##   ..$ debug        : NULL\n##   ..$ inherit.blank: logi TRUE\n##   ..- attr(*, \"class\")= chr [1:2] \"element_text\" \"element\"\n##  $ legend.title.position           : NULL\n##  $ legend.position                 : chr \"right\"\n##  $ legend.position.inside          : NULL\n##  $ legend.direction                : NULL\n##  $ legend.byrow                    : NULL\n##  $ legend.justification            : chr \"center\"\n##  $ legend.justification.top        : NULL\n##  $ legend.justification.bottom     : NULL\n##  $ legend.justification.left       : NULL\n##  $ legend.justification.right      : NULL\n##  $ legend.justification.inside     : NULL\n##  $ legend.location                 : NULL\n##  $ legend.box                      : NULL\n##  $ legend.box.just                 : NULL\n##  $ legend.box.margin               : 'margin' num [1:4] 0cm 0cm 0cm 0cm\n##   ..- attr(*, \"unit\")= int 1\n##  $ legend.box.background           : list()\n##   ..- attr(*, \"class\")= chr [1:2] \"element_blank\" \"element\"\n##  $ legend.box.spacing              : 'simpleUnit' num 11points\n##   ..- attr(*, \"unit\")= int 8\n##   [list output truncated]\n##  - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n##  - attr(*, \"complete\")= logi TRUE\n##  - attr(*, \"validate\")= logi TRUE\n```\n:::\n\n\n### Network Graph\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Q1_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display the network graph\nggraph(mc3_graph, layout = \"fr\") + # Using Fruchterman-Reingold layout\n  geom_edge_link(aes(edge_alpha = 0.8, edge_width = 0.8)) + # Customize edge appearance\n  geom_node_point(aes(size = betweenness_centrality, color = closeness_centrality)) + # Customize node appearance\n  scale_color_viridis_c() + # Use viridis color scale\n  theme_void() + # Use a void theme\n  labs(title = \"Refined Network Graph of Atypical Business Transactions\",\n       subtitle = \"Nodes colored by closeness centrality and sized by betweenness centrality\",\n       caption = \"Data Source: mc3.json\") # Add titles and captions\n```\n:::\n\n:::\n\n::: callout-note\nThe grey circular portion in the center of the network graph does not represent any specific data or entities. It is a visual byproduct resulting from the dense clustering of nodes and edges in that central region. This effect is particularly noticeable in dense, highly interconnected network visualizations where nodes and edges are concentrated in a small space.\n\nThus, we filter the nodes to refine the graph.\n:::\n\n### Refined Network Graph\n\n#### Top Nodes\n\nIdentify top 20 nodes by betweenness centrality\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Identify top nodes by betweenness centrality\ntop_nodes <- mc3_graph %>% \n  as_tibble()\n\n# Identify top 20 nodes by betweenness centrality\ntop_nodes2 <- top_nodes %>% \n  top_n(20, wt = betweenness_centrality)\n```\n:::\n\n\n#### List of most active people and businesses\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_nodes2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 21 × 8\n   id     country type  revenue ProductServices unmatched betweenness_centrality\n   <chr>  <chr>   <chr>   <dbl> <chr>           <chr>                      <dbl>\n 1 Corte… Mawala… Comp…  6.99e3 Finish carpent… drop                          22\n 2 Evans… Oceanus Fish…  5.50e4 Processing and… drop                          29\n 3 Fried… Mawand… Comp…  1.64e4 Grocery produc… drop                          38\n 4 Gvard… Nalaki… Comp…  6.85e4 Shipping servi… drop                          33\n 5 Hill … Oceanus Comp…  4.75e3 Unknown         drop                          31\n 6 Howel… Mawand… Comp…  7.74e6 High-grade met… drop                          54\n 7 Johns… Valtal… Comp…  3.35e4 Machinery and … drop                          33\n 8 Kaise… Isla S… Comp…  2.32e4 Canned and cur… drop                          26\n 9 King … Oceanus Comp…  0      Operation of i… drop                          29\n10 Lane … Imazam  Fish…  4.80e3 Fish and seafo… drop                          33\n# ℹ 11 more rows\n# ℹ 1 more variable: closeness_centrality <dbl>\n```\n:::\n:::\n\n\n::: callout-note\nIt is likely that these entities on the top 10 list are big players in the industry and control information and resources.\n\nHigh betweenness centrality means that a node plays a more crucial role in connecting other nodes. It can be an indicator of:\n\n-   **Brokerage Role**: Nodes with high betweenness centrality often act as bridges or intermediaries between different parts of the network. They control the flow of information, resources, or interactions between other nodes.\n\n-   **Control and Influence**: Nodes with high betweenness centrality have the potential to control the flow of information or resources in the network. They may have more influence or power over the network dynamics compared to other nodes.\n:::\n\nPlot refined graph\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Q1_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract IDs of top nodes\n# Extract IDs of top nodes\ntop_node_ids <- top_nodes$id\n\n# Filter the graph to include only top nodes and their incident edges\ntop_graph <- mc3_graph %>%\n  activate(nodes) %>%\n  filter(id %in% top_node_ids) %>%\n  activate(edges) %>%\n  filter(edge_is_incident(top_node_ids))\n\n# Plot the network graph with top nodes\nggraph(top_graph, layout = \"fr\") + \n  geom_edge_link(aes(edge_alpha = 0.1, edge_width = 0.1)) +\n  geom_node_point(aes(size = betweenness_centrality, color = closeness_centrality)) +\n  scale_color_viridis_c() +\n  theme_void() +\n  labs(title = \"Top 20 Nodes Network Graph\",\n       subtitle = \"Nodes colored by closeness centrality and sized by betweenness centrality\",\n       caption = \"Data Source: mc3.json\")\n```\n:::\n\n:::\n\n::: callout-note\nWe can see that for the top nodes, they are highly interconnected. To the extent that the graph becomes less interpretable.\n:::\n\n### Centrality Over Time\n\nPlot Graph\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assuming you have a function to calculate centrality for each year\ncalculate_centrality_over_time <- function(nodes, edges, time_unit = \"year\")\n  {\n  edges <- edges %>%\n    mutate(period = as.Date(paste0(tyear, \"-01-01\")))\n  \n  centrality_results <- edges %>%\n    group_by(period) %>%\n    do({\n      current_edges <- .\n      current_nodes <- nodes %>% filter(id %in% unique(c(current_edges$source, current_edges$target)))\n      graph <- tbl_graph(nodes = current_nodes, edges = current_edges, directed = TRUE)\n      graph %>%\n        mutate(betweenness = centrality_betweenness()) %>%\n        as_tibble() %>%\n        summarise(mean_betweenness = mean(betweenness, na.rm = TRUE))\n    }) %>%\n    ungroup()\n  \n  return(centrality_results)\n}\n\n# Calculate centrality measures over time\ncentrality_over_time <- calculate_centrality_over_time(mc3_nodes1, mc3_edges)\n\n# Plot centrality measures over time\nggplot(centrality_over_time, aes(x = period, y = mean_betweenness)) +\n  geom_line(color = \"red\") +\n  labs(title = \"Average Betweenness Centrality Per Year\",\n       x = \"Year\",\n       y = \"Mean Betweenness Centrality\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Q1_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nThis graph shows that there is a increasing trend of the average betweenness centrality per year over time.\n\nFrom around 2000 to 2020, the average betweenness centrality remains relatively low and fluctuates within a small range, indicating a stable network structure during this period. However, starting around 2025, there is a sharp and dramatic increase in the average betweenness centrality.\n\nThis sudden rise suggests a significant change in the network dynamics, where certain nodes or entities are becoming increasingly important as bridges or intermediaries connecting different parts of the network. Such a drastic increase could potentially indicate the emergence of new influential players, changes in transaction patterns, or the formation of new connections and pathways within the network.\n\nThe rapid growth in average betweenness centrality implies that the network structure is becoming more centralized, with a smaller number of nodes acting as critical hubs or gatekeepers, controlling the flow of information or transactions within the network.\n:::\n\n## Key Influencers\n\n### Extract key influencers and their edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter mc3_edges to keep rows where source ID is in top_nodes2\nkeypersonnel <- mc3_edges %>%\n  filter(source %in% top_nodes2$id)\n```\n:::\n\n\n### Key influencers of the industry\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(keypersonnel$source)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Cortez LLC\"                       \"Evans-Pearson\"                   \n [3] \"Friedman, Gibson and Garcia\"      \"GvardeyskAmerica Shipping Plc\"   \n [5] \"Hill PLC\"                         \"Howell LLC\"                      \n [7] \"Johnson, Perez and Salinas\"       \"Kaiser, Warren and Shepard\"      \n [9] \"King and Sons\"                    \"Lane Group\"                      \n[11] \"Lee-Ramirez\"                      \"Mcpherson-Wright\"                \n[13] \"NamRiver Transit A/S\"             \"Osborne, Saunders and Brown\"     \n[15] \"Patel-Miller\"                     \"Ramos, Jordan and Stewart\"       \n[17] \"Rivera, Lee and Carroll\"          \"Russell and Sons\"                \n[19] \"Stein, Taylor and Williams\"       \"StichtingMarine Shipping Company\"\n[21] \"Vasquez-Gonzalez\"                \n```\n:::\n:::\n\n\n::: callout-note\nThe key influencers are:\n\n-   Cortez LLC\n\n-   Evans-Pearson\n\n-   Friedman, Gibson and Garcia\n\n-   GvardeyskAmerica Shipping Plc\n\n-   Hill PLC\n\n-   Howell LLC\n\n-   Johnson, Perez and Salinas\n\n-   Kaiser, Warren and Shepard\n\n-   King and Sons\n\n-   Lane Group\n\n-   Lee-Ramirez\n\n-   Mcpherson-Wright\n\n-   NamRiver Transit A/S\n\n-   Osborne, Saunders and Brown\n\n-   Patel-Miller\n\n-   Ramos, Jordan and Stewart\n\n-   Rivera, Lee and Carroll Russell and Sons\n\n-   Stein, Taylor and Williams\n\n-   StichtingMarine Shipping Company\n\n-   Vasquez-Gonzalez\n:::\n\nRelationship between influencers and their links\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(keypersonnel$type)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Shareholdership\"\n```\n:::\n:::\n\n\n::: callout-note\nThere is only 1 type of relationship between the influencers and their links. The influencers are shareholders of those they are linked to.\n:::\n\n### Network Graph\n\nCreate Graph Object\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a nodes dataframe from the unique source and target values\nnodes <- unique(c(keypersonnel$source, keypersonnel$target)) %>%\n  data.frame(name = .)\n\n# Create the graph object using tbl_graph\ngraph_data <- tbl_graph(nodes = nodes,\n                        edges = keypersonnel %>%\n                          rename(from = source, to = target),\n                        directed = TRUE)\n```\n:::\n\n\nPlot Graph\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Q1_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Plot the directed graph\nggraph(graph_data, layout = \"fr\") +  # Using Fruchterman-Reingold layout\n  geom_edge_link(aes(label = as.character(tyear)),  # Only label with tyear\n                 arrow = arrow(length = unit(4, 'mm')),  # Add arrows to indicate direction\n                 end_cap = circle(3, 'mm'),  # Cap the end of the edges with a circle\n                 label_dodge = unit(2, \"mm\"),  # Adjust label position to avoid overlap\n                 label_size = 3,  # Set label size\n                 edge_width = 0.8,  # Set edge width\n                 edge_alpha = 0.8) +  # Set edge transparency\n  geom_node_point(size = 5, color = \"blue\") +  # Customize node appearance\n  geom_node_text(aes(label = name), vjust = 1.5, size = 4) +  # Add node labels\n  theme_void() +  # Use a void theme\n  labs(title = \"Directed Network Graph of Key Personnel Transactions\",\n       subtitle = \"Nodes represent unique sources and targets, edges labeled with year\",\n       caption = \"Data Source: keypersonnel\")  # Add titles and captions\n```\n:::\n\n:::\n\n::: callout-note\nMost number of links:\n\n| Entity Name                      | Number of Links |\n|----------------------------------|-----------------|\n| GvardeyskAmerica Shipping Plc    | 4               |\n| Rivera, Lee and Carroll          | 3               |\n| Cortez LLC                       | 2               |\n| Kaiser, Warren and Shepard       | 2               |\n| Mcpherson-Wright                 | 2               |\n| Patel-Miller                     | 2               |\n| StichtingMarine Shipping Company | 2               |\n| Vasquez-Gonzalez                 | 2               |\n\nThe earliest link: Lane Group has been the shareholder of Howell LLC since 2020.\n\nThe most recent link: GvardeyskAmerica Shipping Plc is the shareholder of ArawakFish Cargo Ges.m.b.H.. since 2034.\n:::\n",
    "supporting": [
      "Q1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}