{
  "hash": "3f98eaf66701eb75b54a7ade214a26ef",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Vast Challenge 2024: Question 4\"\nauthor: \"Ke Ke\"\ndate: \"18 May 2024\"\ndate-modified: \"last-modified\"\nformat:\n  html:\n    code-fold: true\n    code-tools: true\nexecute:\n  warning: false\n  freeze: true\n---\n\n\n## Getting Started\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidytext, readtext, quanteda, tidyverse, jsonlite, igraph, tidygraph, ggraph, visNetwork, clock, graphlayouts,ggplot2)\n```\n:::\n\n\n## **Importing JSON File**\n\nDirect import of the mc3.json file shows an error message indicating that there's an invalid character in the JSON text, specifically \"NaN\". As \"NaN\" is not recognised as a valid value, preprocessing of the JSON file to replace \"NaN\" is required.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read the JSON file as text\njson_text <- readLines(\"data/mc3.json\" ,warn = FALSE)\n\n# Replace \"NaN\" with \"null\"\njson_text_fixed <- gsub(\"NaN\", \"null\", json_text)\n\n# Write the fixed JSON text back to a file\nwriteLines(json_text_fixed, \"data/mc3_fixed.json\")\n```\n:::\n\n\nImporting preprocessed mc3_fixed.json file\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_data <- fromJSON(\"data/mc3_fixed.json\")\n```\n:::\n\n\n## Data Cleaning\n\n### Missing Values\n\nIdentify the percentage of missing values within the dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to calculate missing value percentages\ncalculate_missing_percentage <- function(df) {\n  total_values <- nrow(df) * ncol(df)\n  missing_values <- sum(is.na(df))\n  missing_percentage <- (missing_values / total_values) * 100\n  return(missing_percentage)\n}\n```\n:::\n\n\nMissing percentage of nodes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_missing_percentage <- calculate_missing_percentage(mc3_data[[\"nodes\"]])\nnodes_missing_percentage\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35.11952\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnodes_missing_by_column <- sapply(mc3_data[[\"nodes\"]], function(x) sum(is.na(x)) / length(x) * 100)\n```\n:::\n\n\nMissing percentage of edges\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinks_missing_percentage <- calculate_missing_percentage(mc3_data[[\"links\"]])\nlinks_missing_percentage\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.059973\n```\n\n\n:::\n\n```{.r .cell-code}\nlinks_missing_by_column <- sapply(mc3_data[[\"links\"]], function(x) sum(is.na(x)) / length(x) * 100)\nlinks_missing_by_column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       start_date              type   _last_edited_by _last_edited_date \n        0.1187069         0.0000000         0.0000000         0.0000000 \n      _date_added       _raw_source        _algorithm            source \n        0.0000000         0.0000000         0.0000000         0.0000000 \n           target               key          end_date \n        0.0000000         0.0000000        99.5410000 \n```\n\n\n:::\n:::\n\n\nPrint missing percentages\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# \nprint(nodes_missing_percentage)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35.11952\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(nodes_missing_by_column)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             type           country   ProductServices    PointOfContact \n          0.00000           0.00000          85.34204          85.38334 \n        HeadOfOrg     founding_date           revenue  TradeDescription \n         85.35691          85.34204          85.36847          85.34204 \n  _last_edited_by _last_edited_date       _date_added       _raw_source \n          0.00000           0.00000           0.00000           0.00000 \n       _algorithm                id               dob \n          0.00000           0.00000          14.65796 \n```\n\n\n:::\n\n```{.r .cell-code}\nprint(links_missing_percentage)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9.059973\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(links_missing_by_column)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       start_date              type   _last_edited_by _last_edited_date \n        0.1187069         0.0000000         0.0000000         0.0000000 \n      _date_added       _raw_source        _algorithm            source \n        0.0000000         0.0000000         0.0000000         0.0000000 \n           target               key          end_date \n        0.0000000         0.0000000        99.5410000 \n```\n\n\n:::\n:::\n\n\n::: panel-tabset\n## Observations:\n\n-   **Nodes Data:**\n\n    -   `ProductServices`, `PointOfContact`, `HeadOfOrg`, `founding_date`, `revenue`, and `TradeDescription` columns have a high percentage of missing values (around 85%).\n\n    -   The `dob` column has about 14.7% missing values.\n\n    -   Other columns (`type`, `country`, `_last_edited_by`, `_last_edited_date`, `_date_added`, `_raw_source`, `_algorithm`, and `id`) have no missing values.\n\n-   **Links Data:**\n\n    -   `end_date` has a very high percentage of missing values (around 99.5%).\n\n## Actions:\n\n-   Filled missing values in `HeadOfOrg` with \"Unknown\".\n\n-   Filled missing values in `revenue` with 0.\n\n-   Filled missing values in `start_date` and `end_date` with \"Unknown\".\n:::\n\nHandle missing values\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select crucial columns and fill missing values where appropriate\ncleaned_nodes <- mc3_data[[\"nodes\"]] %>%\n  select(id, type, country, HeadOfOrg, revenue,ProductServices,PointOfContact,founding_date,TradeDescription,dob,\n         `_last_edited_by`, `_last_edited_date`, `_date_added`, `_raw_source`, `_algorithm`) %>%\n  mutate(HeadOfOrg = ifelse(is.na(HeadOfOrg), \"Unknown\", HeadOfOrg),\n         revenue = ifelse(is.na(revenue), 0, revenue))\n\n# Handle missing values in links\n# Select crucial columns and fill missing values where appropriate\ncleaned_links <- mc3_data[[\"links\"]] %>%\n  select(key,source, target, type, start_date, end_date, `_last_edited_by`, `_last_edited_date`, `_date_added`, `_raw_source`, `_algorithm`) %>%\n  mutate(start_date = ifelse(is.na(start_date), \"Unknown\", start_date),\n         end_date = ifelse(is.na(end_date), \"Unknown\", end_date))\n\n# Ensure proper data types\ncleaned_nodes <- cleaned_nodes %>%\n  mutate(\n    id = as.character(id),\n    type = as.character(type),\n    country = as.character(country),\n    HeadOfOrg = as.character(HeadOfOrg),\n    revenue = as.numeric(revenue),\n    `_last_edited_by` = as.character(`_last_edited_by`),\n    `_last_edited_date` = as.character(`_last_edited_date`),\n    `_date_added` = as.character(`_date_added`),\n    `_raw_source` = as.character(`_raw_source`),\n    `_algorithm` = as.character(`_algorithm`)\n  )\n\ncleaned_links <- cleaned_links %>%\n mutate(\n    source = as.character(source),\n    target = as.character(target),\n    type = as.character(type),\n    start_date = as.character(start_date),\n    end_date = as.character(end_date),\n    `_last_edited_by` = as.character(`_last_edited_by`),\n    `_last_edited_date` = as.character(`_last_edited_date`),\n    `_date_added` = as.character(`_date_added`),\n    `_raw_source` = as.character(`_raw_source`),\n    `_algorithm` = as.character(`_algorithm`)\n  )\n```\n:::\n\n\n### Check for data types\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure correct data types for nodes\ncleaned_nodes <- cleaned_nodes %>%\n  mutate(\n    id = as.character(id),\n    type = as.character(type),\n    country = as.character(country),\n    HeadOfOrg = as.character(HeadOfOrg),\n    revenue = as.numeric(revenue),\n      dob = as.POSIXct(dob, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_last_edited_by` = as.character(`_last_edited_by`),\n    `_last_edited_date` = as.POSIXct(`_last_edited_date`, format=\"%Y-%m-%dT%H:%M:%S\"),\n    founding_date=as.POSIXct(founding_date, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_date_added` = as.POSIXct(`_date_added`, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_raw_source` = as.character(`_raw_source`),\n    `_algorithm` = as.character(`_algorithm`)\n    \n  )\n\n# Ensure correct data types for links\ncleaned_links <- cleaned_links %>%\n mutate(\n    source = as.character(source),\n    target = as.character(target),\n    type = as.character(type),\n    start_date = as.POSIXct(start_date, format=\"%Y-%m-%dT%H:%M:%S\"),\n    end_date = as.POSIXct(end_date, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_last_edited_by` = as.character(`_last_edited_by`),\n    `_last_edited_date` = as.POSIXct(`_last_edited_date`, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_date_added` = as.POSIXct(`_date_added`, format=\"%Y-%m-%dT%H:%M:%S\"),\n    `_raw_source` = as.character(`_raw_source`),\n    `_algorithm` = as.character(`_algorithm`)\n  )\n\n# Print cleaned data for inspection\nglimpse(cleaned_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 60,520\nColumns: 15\n$ id                  <chr> \"Abbott, Mcbride and Edwards\", \"Abbott-Gomez\", \"Ab…\n$ type                <chr> \"Entity.Organization.Company\", \"Entity.Organizatio…\n$ country             <chr> \"Uziland\", \"Mawalara\", \"Uzifrica\", \"Islavaragon\", …\n$ HeadOfOrg           <chr> \"Émilie-Susan Benoit\", \"Honoré Lemoine\", \"Jules La…\n$ revenue             <dbl> 5994.73, 71766.67, 0.00, 0.00, 4746.67, 46566.67, …\n$ ProductServices     <chr> \"Unknown\", \"Furniture and home accessories\", \"Food…\n$ PointOfContact      <chr> \"Rebecca Lewis\", \"Michael Lopez\", \"Steven Robertso…\n$ founding_date       <dttm> 1954-04-24, 2009-06-12, 2029-12-15, 1972-02-16, 1…\n$ TradeDescription    <chr> \"Unknown\", \"Abbott-Gomez is a leading manufacturer…\n$ dob                 <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `_last_edited_by`   <chr> \"Pelagia Alethea Mordoch\", \"Pelagia Alethea Mordoc…\n$ `_last_edited_date` <dttm> 2035-01-01, 2035-01-01, 2035-01-01, 2035-01-01, 2…\n$ `_date_added`       <dttm> 2035-01-01, 2035-01-01, 2035-01-01, 2035-01-01, 2…\n$ `_raw_source`       <chr> \"Existing Corporate Structure Data\", \"Existing Cor…\n$ `_algorithm`        <chr> \"Automatic Import\", \"Automatic Import\", \"Automatic…\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(cleaned_links)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 75,817\nColumns: 11\n$ key                 <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n$ source              <chr> \"Avery Inc\", \"Berger-Hayes\", \"Bowers Group\", \"Bowm…\n$ target              <chr> \"Allen, Nichols and Thompson\", \"Jensen, Morris and…\n$ type                <chr> \"Event.Owns.Shareholdership\", \"Event.Owns.Sharehol…\n$ start_date          <dttm> 2016-10-29, 2035-06-03, 2028-11-20, 2024-09-04, 2…\n$ end_date            <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ `_last_edited_by`   <chr> \"Pelagia Alethea Mordoch\", \"Niklaus Oberon\", \"Pela…\n$ `_last_edited_date` <dttm> 2035-01-01, 2035-07-15, 2035-01-01, 2035-01-01, 2…\n$ `_date_added`       <dttm> 2035-01-01, 2035-07-15, 2035-01-01, 2035-01-01, 2…\n$ `_raw_source`       <chr> \"Existing Corporate Structure Data\", \"Oceanus Corp…\n$ `_algorithm`        <chr> \"Automatic Import\", \"Manual Entry\", \"Automatic Imp…\n```\n\n\n:::\n:::\n\n\n### **Changing field name**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncleaned_nodes <- cleaned_nodes %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n\ncleaned_links<- cleaned_links %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n```\n:::\n\n\n### Split *'type'* column into separate columns\n\nWe are going to tidy the type column by creating two columns \"entity2,entity3\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list1 <- strsplit(cleaned_nodes$type, \"\\\\.\")\nmax_elements1 <- max(lengths(word_list1))\nword_list_padded1 <- lapply(word_list1, \nfunction(x) c(x, rep(NA, max_elements1 - length(x))))\nword_df1 <- do.call(rbind, word_list_padded1)\ncolnames(word_df1) <- paste0(\"entity\", 1:max_elements1)\nword_df1 <- as_tibble(word_df1) %>%\n  select(entity2, entity3)\nclass(word_df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\nThe steps below will be used to split text in type column into two columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(cleaned_links$type, \"\\\\.\")\nmax_elements <- max(lengths(word_list))\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"event\", 1:max_elements)\nword_df <- as_tibble(word_df) %>%\n  select(event2, event3)\nclass(word_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\nSince the output above is a matrix, the code chunk above is used to convert word_df into a tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncleaned_nodes <- cleaned_nodes %>%\n  cbind(word_df1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncleaned_links <- cleaned_links %>%\n  cbind(word_df)\n```\n:::\n\n\nThe code chunk above appends the extracted columns back to edges tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(cleaned_nodes, \"data/rds/cleaned_nodes.rds\")\nwrite_rds(cleaned_links, \"data/rds/cleaned_links.rds\")\n```\n:::\n\n\nabove code write into R **rds** file format.\n\n## Question 4\n\nFor part 1, the focus was on identifying the network associated with SouthSeafood Express Corp and visualizing how this network and competing businesses changed as a result of their illegal fishing behavior.\n\n#### Part 1: Identify SouthSeafood Express Corp Node\n\n-   Locate the node representing SouthSeafood Express Corp in the network.\n\n-   Create a visualization of the network associated with SouthSeafood Express Corp before any changes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract edges connected to SouthSeafood Express Corp\nsouthseafood_edges <- cleaned_links %>%\n  filter(source == \"SouthSeafood Express Corp\" | target == \"SouthSeafood Express Corp\")%>%\n  select(source,target,start_date,end_date,event2)\n\n# Ensure all nodes in the edge list are present in the vertex data frame\nsouthseafood_nodes <- cleaned_nodes %>%\n  filter(id %in% (c(southseafood_edges$source, southseafood_edges$target)))\n\n# Join edges with nodes to ensure all nodes are present\nsouthseafood_edges <- southseafood_edges %>%\n  filter(source %in% southseafood_nodes$id & target %in% southseafood_nodes$id)\n\n# Create graph object for the sub-network\ng_southseafood <- graph_from_data_frame(d = southseafood_edges, vertices = southseafood_nodes, directed = TRUE)\n\n# Visualize the initial network\nplot(g_southseafood, vertex.label = NA, vertex.size = 5, edge.arrow.size = 0.5, \n     vertex.color = \"orange\", main = \"Network Associated with SouthSeafood Express Corp\")\n```\n\n::: {.cell-output-display}\n![](Q4_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n#### Part 1: Identify Competing Businesses\n\nIdentify and highlight competing businesses within the extracted sub-network.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompeting_businesses <- cleaned_nodes %>%\n  filter(entity3 == \"FishingCompany\" & id != \"SouthSeafood Express Corp\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncompeting_edges <- cleaned_links %>%\n  filter(source %in% competing_businesses$id | target %in% competing_businesses$id) %>%\n  select(source, target, start_date, end_date, event2)\n\n# Combine SouthSeafood Express Corp edges with competing businesses edges\ncombined_edges <- bind_rows(southseafood_edges, competing_edges)\n\n# Extract the combined set of nodes\ncombined_nodes <- cleaned_nodes %>%\n  filter(id %in% c(combined_edges$source, combined_edges$target))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create graph object for the combined network\ng_combined <- graph_from_data_frame(d = combined_edges, vertices = combined_nodes, directed = TRUE)\n```\n:::\n\n\n#### Part 1: Analyze Temporal Changes based on *start_year*\n\n-   Filter the data to show the network before and after the illegal fishing incident(assume the incident happened in 2023)\n\n-   Create visualizations to compare the network structure and connections before and after the incident.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assume the accident happened in 2023\nincident_year <- 2023\n\n# Filter edges before the incident\nedges_before <- combined_edges %>%\n  filter(format(start_date, \"%Y\") < incident_year)\n\n# Filter edges after the incident\nedges_after <- combined_edges %>%\n  filter(format(start_date, \"%Y\") >= incident_year)\n\n# Create graph objects for before and after the incident\ng_before <- graph_from_data_frame(d = edges_before, vertices = combined_nodes, directed = TRUE)\ng_after <- graph_from_data_frame(d = edges_after, vertices = combined_nodes, directed = TRUE)\n```\n:::\n\n\n#### Part 1: Visualize the Temporal Changes\n\nIdentify and highlight significant changes in connections and structure due to the illegal fishing behavior and subsequent closure.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2, 1))\n\nplot_before <- ggraph(g_before, layout = \"fr\") +\n  geom_edge_link(aes(edge_alpha = 0.8), show.legend = FALSE, color = \"gray\", width = 1) +\n  geom_node_point(aes(color = ifelse(name == \"SouthSeafood Express Corp\", \"SouthSeafood\", \n                                     ifelse(type == \"Entity.Organization.FishingCompany\", \"FishingCompany\", \"Other\"))), \n                  size = 3, alpha = 0.6, show.legend = TRUE) + # Adjusted alpha for transparency\n  scale_color_manual(values = c(\"SouthSeafood\" = \"red\", \"FishingCompany\" = \"blue\", \"Other\" = \"orange\"),\n                     name = \"Type\") + # Shortened legend title\n  theme_void() +\n  theme(legend.position = \"bottom\") +\n  labs(title = \"Network Before Incident\")\n\n# Show the plot for the network before the incident\nplot_before\n```\n\n::: {.cell-output-display}\n![](Q4_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot_after <- ggraph(g_after, layout = \"fr\") +\n  geom_edge_link(aes(edge_alpha = 0.8), show.legend = FALSE, color = \"gray\", width = 1) +\n  geom_node_point(aes(color = ifelse(name == \"SouthSeafood Express Corp\", \"SouthSeafood\", \n                                     ifelse(type == \"Entity.Organization.FishingCompany\", \"FishingCompany\", \"Other\"))), \n                  size = 3, alpha = 0.6, show.legend = TRUE) + # Adjusted alpha for transparency\n  scale_color_manual(values = c(\"SouthSeafood\" = \"red\", \"FishingCompany\" = \"blue\", \"Other\" = \"orange\"),\n                     name = \"Type\") + # Shortened legend title\n  theme_void() +\n  theme(legend.position = \"bottom\") +\n  labs(title = \"Network After Incident\")\n\n# Show the plot for the network after the incident\nplot_after\n```\n\n::: {.cell-output-display}\n![](Q4_files/figure-html/unnamed-chunk-22-2.png){width=672}\n:::\n:::\n\n\n::: callout-note\n**Observations**:\n\n-   The number of blue nodes (fishing companies) appears to have decreased.\n\n-   SouthSeafood Express Corp (red node) remains central but its connections might have changed, indicating possible impact from the incident.\n:::\n\nFor part 2, since we cannot use revenue data over time, we will focus on identifying which companies potentially benefited from SouthSeafood Express Corp's legal troubles by analyzing changes in network centrality measures.\n\n#### Part 2: Calculate Centrality Measures Before and After the Incident\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate degree centrality before the incident\ndegree_before <- degree(g_before, mode = \"all\")\n\n# Calculate degree centrality after the incident\ndegree_after <- degree(g_after, mode = \"all\")\n\n# Combine degree centrality measures into a data frame\ncentrality_change <- data.frame(\n  id = names(degree_before),\n  degree_before = degree_before,\n  degree_after = degree_after\n)\n\n# Calculate the change in degree centrality\ncentrality_change <- centrality_change %>%\n  mutate(change = degree_after - degree_before)\n\n# Display companies with the most positive change in degree centrality\ntop_beneficiaries <- centrality_change %>%\n  arrange(desc(change)) %>%\n  head(10)\n\nprint(top_beneficiaries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                           id degree_before degree_after change\nAnderson-Roberts             Anderson-Roberts             0           36     36\nHall, Hartman and Hall Hall, Hartman and Hall             0           30     30\nKirk Inc                             Kirk Inc             0           18     18\nWatson-Gray                       Watson-Gray             0           18     18\nParker Inc                         Parker Inc             0           17     17\nMullins-Carrillo             Mullins-Carrillo             0           15     15\nTorres, Ross and Brown Torres, Ross and Brown             0           14     14\nByrd and Sons                   Byrd and Sons             0           13     13\nHaynes-Lucero                   Haynes-Lucero             0           13     13\nLutz-Fleming                     Lutz-Fleming             0           13     13\n```\n\n\n:::\n:::\n\n\n#### Part 2: Determine Entity Type\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Merge with cleaned_nodes to get the entity type\ntop_beneficiaries_info <- top_beneficiaries %>%\n  left_join(cleaned_nodes, by = c(\"id\" = \"id\")) %>%\n  select(id, change,entity3)\n\n# Display the entity type of top beneficiaries\nprint(top_beneficiaries_info)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                       id change        entity3\n1        Anderson-Roberts     36 FishingCompany\n2  Hall, Hartman and Hall     30 FishingCompany\n3                Kirk Inc     18 FishingCompany\n4             Watson-Gray     18 FishingCompany\n5              Parker Inc     17 FishingCompany\n6        Mullins-Carrillo     15 FishingCompany\n7  Torres, Ross and Brown     14 FishingCompany\n8           Byrd and Sons     13 FishingCompany\n9           Haynes-Lucero     13 FishingCompany\n10           Lutz-Fleming     13 FishingCompany\n```\n\n\n:::\n:::\n\n\n#### Part 2: Visualize the Changes\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bar plot of top beneficiaries\nggplot(top_beneficiaries_info, aes(x = reorder(id, change), y = change)) +\n  geom_bar(stat = \"identity\", fill = \"lightblue\") +\n  coord_flip() +\n  theme_minimal() +\n  labs(title = \"Top Beneficiaries by Change in Degree Centrality\",\n       x = \"Company\",\n       y = \"Change in Degree Centrality\",\n       fill = \"Entity Type\") +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Q4_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nThe results show that the top beneficiaries, all classified as fishing companies, significantly increased their network centrality following SouthSeafood Express Corp's legal troubles. Anderson-Roberts, Hall, Hartman and Hall, and Kirk Inc., among others, saw the largest gains, suggesting they capitalized on the shift in the network's structure.\n",
    "supporting": [
      "Q4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}